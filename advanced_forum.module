<?php
// $Id$

/*****************************************************************************/
/******************************** HOOKS **************************************/
/*****************************************************************************/

/**
 * Implementation of hook_init.
 */
function advanced_forum_init() {
  advanced_forum_add_css();
}

/**
 * Implementation of hook_menu.
 */
/*
//TODO: Update this to work with the D6 menu.
function advanced_forum_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    global $user;
    $items[] = array(
               'path' => "forum/markasread",
               'title' => 'Helper page to mark forums read.',
               'callback' => 'advanced_forum_markasread',
               'access' => user_access('access content') && $user->uid,
               'type' => MENU_CALLBACK,
               );
  }
  
  return $items;
}
*/

/**
 * Implementation of hook_theme.
 * Registers theme('forum_user')
 */
function advanced_forum_theme() {
  $items = array();
  $items['forum_user'] = array(
      'template' => 'advf-forum-user',
      'path' => drupal_get_path('module', 'advanced_forum') . '/themes/advforum',
      'arguments' => array('accountid' => NULL),
    );
  return $items;
}

/**
 * Implementation of hook_theme_registry_alter()
 **/
function advanced_forum_theme_registry_alter($theme_registry) {
  // Kill the next/previous forum topic navigation links.
  foreach ($theme_registry['forum_topic_navigation']['preprocess functions'] as $key => $value) {
    if ($value = 'template_preprocess_forum_topic_navigation') {
      unset($theme_registry['forum_topic_navigation']['preprocess functions'][$key]);
    }
  }
  
  // Convince the registry that advforum in the module directory is a theme 
  // so our templates are found.
  $templates = array('node','comment','forums','forum_list','forum_topic_list','forum_icon');
  foreach ($templates as $template) {
    $originalpath = array_shift($theme_registry[$template]['theme paths']);
    $modulepath = drupal_get_path('module', 'advanced_forum') . '/themes/advforum';
    array_unshift($theme_registry[$template]['theme paths'], $originalpath, $modulepath);
  }
}

/*****************************************************************************/
/******************* TEMPLATE PREPROCESS *************************************/
/*****************************************************************************/

function advanced_forum_preprocess_node(&$vars) {
  if (_is_forum('node',$vars)) {
    // Use our combined node/comment template file
    $vars['template_files'][] = 'advf-forum-post';

    // The node is the first post, aka topic
    $vars['top_post'] = TRUE;
    
    // Node is being shown in the forum (not on the front page or in a view)
    $vars['is_forum'] = TRUE;
    
    if (!empty($vars['node']->links) && !empty($vars['node']->links['comment_add'])) {
      // Change first post from "add comment" to "Reply"
      $vars['node']->links['comment_add']['title'] = t('Reply');
      $vars['links'] = theme('links', $vars['node']->links, array('class' => 'links inline forumlinks'));
      
      // Make a separate variable for the reply link so it can be put on top of the thread
      $reply_link = $vars['node']->links['comment_add'];
      $reply_link['title'] = t("Post Reply");
      $vars['reply_link'] = theme('links', array('topic_reply'=>$reply_link),array('class' => 'forumlinks'));
    }
    
    // Make an array version of $links
    $vars['links_array'] = $vars['node']->links;

    // User information
    $vars['accountid'] = $vars['node']->uid;  
    $vars['user_info_pane'] = theme('forum_user',$vars['accountid']); 
  }
}

function advanced_forum_preprocess_comment(&$vars) {
  if (_is_forum('comment',$vars)) {
    // Use our combined node/comment template file
    $vars['template_files'][] = 'advf-forum-post';
    
    // Thread is being shown in the forum (not on the front page or in a view)
    $vars['is_forum'] = TRUE;
    
    // This is a comment, not the node.
    $vars['top_post'] = FALSE;

    // Title
    if (variable_get('comment_subject_field', 1) == 0) {
      // if comment titles are disabled, don't display it.
      $vars['title'] = '';
    } else {
      // Assign the subject to the title variable for consistancy with nodes.
      $vars['title'] = check_plain($vars['comment']->subject);
    }
    
    // Just use the date for the submitted on.
    $vars['submitted'] = format_date($vars['comment']->timestamp);

    // Assign the comment to the content variable for consistancy with nodes.
    $vars['content'] = $vars['comment']->comment;
      
    // User information
    $vars['accountid'] = $vars['comment']->uid;  
    $vars['user_info_pane'] = theme('forum_user',$vars['accountid']); 
          
    // Because the $links array isn't available here, we recreate it
    $node = node_load($vars['comment']->nid);
    $links = module_invoke_all('link', 'comment', $vars['comment'], 1);
    foreach (module_implements('link_alter') as $module) {
      $function = $module .'_link_alter';
      $function($node, $links);
    }
    unset($links['comment_parent']);
    $vars['links'] = theme('links',$links,array('class'=>'links forumlinks'));
    $vars['links_array'] = $links;   
    
    // Since we have to load the node anyway for our links trick, make it avail
    $vars['node'] = $node;    

    // Comment number with link
    if (!isset($post_number)) {
      static $post_number = 0;
    }
    _topic_nid($vars['node']->nid);

    $post_per_page = _comment_get_display_setting('comments_per_page',$vars['node']);   
    $page_number = $_GET['page'];
    if (!$page_number) { $page_number = 0; }
    
    $post_number++;
    $fragment = 'comment-' . $vars['comment']->cid;
    $query = ($page_number) ? 'page=' . $page_number : NULL;
    $linktext = '#' . (($page_number * $post_per_page) + $post_number);
    $linkpath = 'node/' . _topic_nid();
    $vars['comment_link'] = l($linktext, $linkpath, array('query' => $query, 'fragment' => $fragment));

    // Link to page created by Comment Page module, if it exists
    if (!empty($vars['comment']->page_url) && !(arg(0) == 'comment' && arg(1) == $vars['comment']->cid)) {
      $variables['page_link'] = l('(permalink)', $vars['comment']->page_url);
    }
    
  }
}

function template_preprocess_forum_user(&$variables) {
  // The passed in $variables['accountid'] refers to the user who's info is in the pane.
  $accountid = $variables['accountid'];
  $account = user_load($accountid);
  
  // Get a reference to the currently logged in user. 
  global $user;
  
  // Username
  $variables['name_raw'] =  theme('username',$account);
  $variables['name'] =  '<div class="username">' .$variables['name_raw'] . '</div>';
  
  // Avatar
  $variables['picture'] = theme('user_picture',$account);

  // Nothing else applies to anon users, so just stop here
  if ($accountid == 0) {
    return;
  }
  
  $themedir =  advanced_forum_get_forum_theme_directory();

  // Join date / since
  $variables['joined_raw'] = format_date($account->created, 'custom', 'Y-m-d');
  $variables['joined'] = '<div class="account-joined"><strong>' . t('Joined: ') . '</strong>' . $variables['joined_raw'] . '</div>';

  $variables['member_since_raw'] = format_interval(time() - $account->created);
  $variables['member_since'] = '<div class="account-member-since">' . t('Member since: ') . $variables['member_since_raw'] . '</div>';
  
  // Online status
  if (round((time()-$account->access)/60) < 15) {
    $variables['online_class'] = 'user-online';
    $variables['online_icon'] = theme_image(path_to_theme() . '/' . $themedir . '/images/status_online.png', 'User is online', 'User is online',NULL, TRUE);
    $variables['online_text'] = t('Online');
    $variables['online_status'] = '<div class="user-online">' . $variables['online_icon'] . ' ' . $variables['online_text'] . '</div>';
  } else {
    $variables['online_class'] = 'user-offline';
    $variables['online_icon'] = theme_image(path_to_theme() . '/' . $themedir . '/images/status_offline.png', 'User is offline', 'User is offline',NULL, TRUE);
    $variables['online_text'] = t('Offline');
    $variables['online_status'] = '<div class="user-offline">' . $variables['online_icon'] . ' ' . $variables['online_text'] . '</div>';
  }

  // Profile
  if (module_exists('profile')) {
    $variables['profile'] = profile_view_profile($account);
  }
  
  // Points
  if (module_exists('userpoints')) {
    $variables['points_raw'] = userpoints_get_current_points($accountid);
    $variables['points'] = '<div class="user-points">' . t('Points: ') . $variables['points_raw'] . '</div>';
  }

  // Posts / IP
  if (module_exists('user_stats')) {
    $variables['posts_raw'] = user_stats_get_stats('post_count',$accountid);
    $variables['posts'] = '<div class="user-posts"><strong>' . t('Posts: ') . '</strong>' . $variables['posts_raw'] . '</div>';
    
    // IP is only visible if the viewer has access, so do an extra check
    $ip = user_stats_get_stats('ip_address',$accountid);
    if (!empty($ip)) {
      $variables['ip_raw'] = $ip;
      $variables['ip'] = '<div class="user-ip"><strong>' . t('IP: ') . '</strong>' . $variables['ip_raw'] . '</div>';
    }
  }
 
  // Title
  if (module_exists('user_titles')) {
    $variables['user_title_raw'] = user_titles_get_user_title($accountid);
    $variables['user_title'] = '<div class="user-title">' . $variables['user_title_raw'] . '</div>';
  }

  // Badges
  if (module_exists('user_badges')) {
    $variables['user_badges_raw'] = user_badges_for_uid($accountid);
    $variables['user_badges'] = '<div class="user-badges">' . $variables['user_badges_raw'] . '</div>';
  }

  // Contact user
  if (($account->contact) && ($account->uid != $user->uid) && ($user->uid != 0)) {
    $variables['contact_class'] = "contact";
    $variables['contact_icon'] = theme_image(path_to_theme() . '/' . $themedir . "/images/email.png", 'Email', 'Email', NULL, TRUE);
    $variables['contact_text'] = t('Email'); 
    $variables['contact_link'] = 'user/'. $accountid . '/contact';
    $variables['contact'] = '<div class="contact">' . 
                          l($variables['contact_icon'] . ' '  . $variables['contact_text'], $variables['contact_link'],NULL,NULL,NULL,NULL,TRUE) . 
                          '</div>';
  } 
           
  // Send private message
  if (module_exists('privatemsg') && 
     ($account->uid != $user->uid) && 
     user_access('access private messages') && 
     (isset($account->privatemsg_allow) ? $account->privatemsg_allow : 1)) { 
    $variables['privatemsg_icon'] = theme_image(path_to_theme() . '/' . $themedir . "/images/user_comment.png", 'Private Message', 'Private Message', NULL, TRUE);
    $variables['privatemsg_text'] = t('Send PM'); 
    $variables['privatemsg_link'] = 'privatemsg/new/'. $accountid;
    $variables['privatemsg'] = '<div class="privatemsg">' . 
      l($variables['privatemsg_icon'] . ' '  . 
      $variables['privatemsg_text'], $variables['privatemsg_link'],NULL,NULL,NULL,NULL,TRUE) . '</div>';
  } 

  // Add / remove from buddylist
  if (module_exists('buddylist')) {
  
    if (user_access('maintain buddy list') && @in_array($accountid, array_keys(buddylist_get_buddies($user->uid)))) {
      // Remove buddy
      $variables['buddylist_class'] = "buddy-remove";
      $variables['buddylist_icon'] = theme_image(path_to_theme() . '/' . $themedir . "/images/group_delete.png", 'Remove Buddy', 'Remove Buddy', NULL, TRUE);
      $variables['buddylist_text'] = t('Remove buddy'); 
      $variables['buddylist_link'] = 'buddy/delete/'. $accountid;
    } else {
      // Add buddy
      if ($accountid != $user->uid && user_access('maintain buddy list')) {
        $variables['buddylist_class'] = "buddy-add";
        $variables['buddylist_icon'] = theme_image(path_to_theme() . '/' . $themedir . "/images/group_add.png", 'Add to buddy list', 'Add to buddy list', NULL, TRUE);
        $variables['buddylist_text'] = t('Add buddy'); 
        $variables['buddylist_link'] = 'buddy/add/'. $accountid;
      }
    }
    
    $variables['buddylist'] = '<div class="' . $variables['buddylist_class'] . '">' . 
                         l($variables['buddylist_icon'] . ' '  . $variables['buddylist_text'], $variables['buddylist_link'],NULL,NULL,NULL,NULL,TRUE) . 
                         '</div>';
  }
 }

/********************** FORUM MODULE THEME OVERRIDES *************************/

function advanced_forum_preprocess_forums(&$variables) {
  $variables['template_files'][] = 'forums';

  if (empty($variables['topics'])) {
    // We don't want the links on the top of the forum overview
    $variables['links_orig'] = $variables['links'];
    $variables['links'] = array();
  }

  // Add in the mark as read link
  $tid = $variables['tid'];
  if ($tid) {
    $title = t('Mark all topics read');
    $link = "forum/markasread/$tid";
  } else {
    $title = t('Mark all forums read');
    $link = "forum/markasread";  
  }
  $variables['links']['markasread'] = array('title'=>$title,'href'=>$link);
  $variables['links_orig']['markasread'] = array('title'=>$title,'href'=>$link);
}

function advanced_forum_preprocess_forum_list(&$variables) {
  $variables['template_files'][] = 'advf-forum-list';
  
  // Add in a link to the last topic in each forum
  $last_topics = advanced_forum_get_all_last_topics();
  foreach ($variables['forums'] as $tid => $forum) {
    $title = truncate_utf8($last_topics[$tid]->nodetitle, 15, TRUE, TRUE);
    $link = l($title,"node/" . $last_topics[$tid]->nid);
    $forum->last_post->nodetitle = $title;
    $forum->last_reply = $link . '<br />' . $forum->last_reply;
  }
}

function advanced_forum_preprocess_forum_topic_list(&$variables) {
  // Take control of the template file.
  $variables['template_files'][] = 'advf-forum-topic-list';
  
  // Do our own topic processing.
  if (!empty($variables['topics'])) {
    $row = 0;
      
    // Find out how many pages to show on the topic pager. We do this outside
    // the loop because it will be the same for all topics.
    $max_pages_to_display = variable_get('advforum_topic_pager_max',5);
    
    foreach ($variables['topics'] as $id => $topic) {
      
      // Find the number of comments per page for the node type of the topic.
      // It's the same for all types in D5, but varies in D6.
      $comments_per_page = _comment_get_display_setting('comments_per_page', $topic);      
      
      if ($max_pages_to_display > 0 && $topic->num_comments > $comments_per_page) {
        // Topic has more than one page and a pager is wanted. Start off the
        // first page because that doesn't have a query.
        $pager_array = array();
        $current_display_page = 1;
        $pager_array[] = l('1',"node/$topic->nid");
        
        // Find the ending point. The pager URL is always 1 less than
        // the number being displayed because the first page is 0.
        $last_display_page = ceil($topic->num_comments / $comments_per_page);
        $last_pager_page = $last_display_page - 1;
        
        // Add pages until we run out or until we hit the max to show.
        while (($current_display_page < $last_display_page) && ($current_display_page < $max_pages_to_display)) {
          // Move to the next page
          $current_display_page++;
          
          // The page number we link to is 1 less than what's displayed
          $link_to_page = $current_display_page - 1;
          
          // Add the link to the array
          $pager_array[] =  l($current_display_page,"node/$topic->nid",array('query'=>'page=' . $link_to_page));
        } 
        
        // Move to the next page
        $current_display_page++;
            
        if ($current_display_page == $last_display_page) {
          // We are one past the max to display, but it's the last page,
          // so putting the ...last is silly. Just display it normally.
          $link_to_page = $current_display_page - 1;
          $pager_array[] =  l($current_display_page,"node/$topic->nid",array('query'=>'page=' . $link_to_page));
        } 

        $pager_last = '';
        if ($current_display_page < $last_display_page) {
          // We are one past the max to display and still aren't
          // on the last page, so put in ... Last Page(N)
          $text = t('Last Page') . '(' . $last_display_page . ')';
          $pager_last = ' &hellip; ' . l($text,"node/$topic->nid",array('query'=>'page=' . $last_pager_page));
        }
            
        // Put it all together
        $variables['topics'][$id]->pager = '[' . t('Page') . ' '. implode(", ", $pager_array) . $pager_last . ']';
      }
          
      // Make shadow copy point to actual thread and tell you new the forum name
      if ($variables['topics'][$id]->moved == TRUE) {
        $term = taxonomy_get_term($topic->tid);
        $variables['topics'][$id]->message = l(t('This topic has been moved to ') . $term->name, "node/$topic->nid");
      }
    }
  }
}

function advanced_forum_preprocess_forum_icon(&$variables) {
  $variables['template_files'][] = 'advf-forum-icon';
  
  // Find the icons for the forums by looking first in the theme and then 
  // in the module. Use a static variable to hold the path so we don't need
  // to go through the process for each icon on the page.
  static $iconpath;
  if (!isset($iconpath)) {
    $iconpath = path_to_theme() . '/' . advanced_forum_get_forum_theme_directory() . '/images';
    if (!file_exists($iconpath)) {
      $iconpath = drupal_get_path('module', 'advanced_forum') . '/themes/advforum/images';
    }
  }
  $variables['iconpath'] = $iconpath;
}

// This one is exclusive to advanced forum
function advanced_forum_preprocess_forum_post(&$variables) {
  $variables['template_files'][] = 'advf-forum-post';
}

function advanced_forum_preprocess_forum_submitted(&$variables) {
  $variables['template_files'][] = 'advf-forum-submitted';
}

/*****************************************************************************/
/*********************** ADDED FUNCTIONALITY *********************************/
/*****************************************************************************/

/**
 * Marks all posts in forums or in a given forum as read by the current user.
 */
function advanced_forum_markasread() {
  global $user;
  $tid = arg(2);

  $sql = 'REPLACE INTO {history} (uid,nid,timestamp)'
         .' SELECT %d, n.nid, %d FROM {node} n'
         .($tid ? ' INNER JOIN {term_node} r ON n.nid=r.nid' : '')
         .' INNER JOIN {node_comment_statistics} l ON l.nid=n.nid'
         .' WHERE (n.created > %d'
         .' OR l.last_comment_timestamp > %d)';
  $args = array($user->uid, time(), NODE_NEW_LIMIT, NODE_NEW_LIMIT);

  if ($tid) {
    $sql .= ' AND r.tid = %d';
    $args[] = $tid;
  }
  
  //*D6* Need to change this for all forum types
  $type = 'forum';
  $sql .= ' AND n.type = \'%s\'';
  $args[] = $type;

  db_query($sql, $args);
  
  if ($tid) {
    drupal_set_message(t('All topics in forum marked as read'));
    drupal_goto('forum/'.$tid);
  } else {
    drupal_set_message(t('All forum posts have been marked as read'));
    drupal_goto('forum');
  }
  
  drupal_goto('forum');
}

/**
 * Returns information about the last updated topics in all forums.
 */
function advanced_forum_get_all_last_topics($reset = FALSE) {
//  if (!$reset && ($cache = cache_get('advanced_forum_alllasttopics')) && !empty($cache->data)) {
//    $topics = unserialize($cache->data);
//  } else {
    // Query the info about the latest topic for the given forum    
    $query = "SELECT n.title AS nodetitle, res.title AS restitle, res.created, res.type AS restype, n.type AS nodetype, n.nid AS nid, t.tid, res.cid AS cid FROM {node} AS n INNER JOIN (SELECT title, created, nid, uid, type, 'cid' AS cid FROM {node} UNION SELECT subject, timestamp, nid, uid, 'comment', cid FROM {comments} ORDER BY created DESC) AS res ON n.nid=res.nid INNER JOIN {term_node} AS t ON n.nid = t.nid GROUP BY tid;";

    $result = db_query( $query, $uid, $tid);
    $topics = array();
    while ($topic = db_fetch_object($result)) {
    	$topics[$topic->tid] = $topic;
    }   
//    cache_set('advanced_forum_alllasttopics', 'cache', serialize($topics), time() + 60);
//  }
  return $topics;
}

/*****************************************************************************/
/****************************** HELPERS **************************************/
/*****************************************************************************/


/**
 * This function returns true if we are in the forums
 */
function _is_forum($hook, $vars) {
  // Setting this static means the check only needs to be done once per page
  // as long as we haven't hit a non forum node on the page
  static $forum_node_id;
  
  switch ($hook) {
    case 'node':
      // Make sure this is a forum node type and that it's not being
      // shown on some other page (like a view or promoted to front page)
      if (($vars['node']->type == 'forum') && arg(0) == 'node' && is_numeric(arg(1))) {
        $forum_node_id = $vars['node']->nid;
        return true;
      } else {
        // In D5, only forum types allowed in the forums so
        // we know this isn't a forum thread (or that it's not in the forums).
        // Will need to revisit in D6.
        unset($forum_node_id);
        return false;
      }
      
    case 'comment':
      if (isset($forum_node_id)) {
        // We already know the node ID of the forum
        // thread on this page, we just need to see
        // if this comment goes with it.
        return $vars['comment']->nid == $forum_node_id;
      } else {
        if (arg(0) == 'comment' && is_numeric(arg(1))) {
          $forum_node_id = $vars['comment']->nid;
          return true;
        }
        return false;
      }
    
    default:
      // 
      return false;
  }  
}

/**
 * Helper function to hold the node ID of the thread we are on. 
 * Used for linking the comment numbers.
 */
function _topic_nid($nodeid = 0) {
  static $nid; 
  
  if (!empty($nodeid)) {
    $nid = $nodeid;
  }
  
  return $nid;
}

/**
 * Return the directory of the forum theme files.
 */
function advanced_forum_get_forum_theme_directory() {
//TODO: Add a settings page for this
  return 'advforum';
}

function advanced_forum_add_css() {
  // Find the CSS files for the forums by looking first in the theme and then 
  // in the module. 
  $csspath = path_to_theme() . '/' . advanced_forum_get_forum_theme_directory();
  if (!file_exists($csspath)) {
    $csspath = drupal_get_path('module', 'advanced_forum') . '/themes/advforum';
  }

  // Load the structural CSS (heights, floats, padding, margins, etc)
  drupal_add_css($csspath . '/advanced_forum-structure.css');
  
  // Add on the colors and graphics part
  drupal_add_css($csspath . '/advanced_forum.css');
}


