<?php
// $Id$

/**
 * @file
 * Enables the look and feel of other popular forum software.
 */

/*****************************************************************************/
/*** DRUPAL HOOKS ************************************************************/
/*****************************************************************************/

/**
 * Implementation of hook_init().
 */
function advanced_forum_init() {
  // load in the advanced forum theme if we're in a forum, or viewing a node.
  if (arg(0) == 'forum' || ($node = menu_get_object())) {
    $style_directory = advanced_forum_path_to_style();
    drupal_add_css("$style_directory/advanced_forum-structure.css" );
    drupal_add_css("$style_directory/advanced_forum.css" );
  }
}

/**
 * Implementation of hook_perm().
 */
function advanced_forum_perm() {
  return array('administer advanced forum');
}

/**
 * Implementation of hook_menu().
 */
function advanced_forum_menu() {
    $items['forum/markasread'] = array(
    'access callback' => 'advanced_forum_markasread_access',
    'page callback' => 'advanced_forum_markasread',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/advanced-forum'] = array(
    'access arguments' => array('administer advanced forum'),
    'description' => 'Configure Advanced Forum with these settings.',
    'page arguments' => array('advanced_forum_settings_page'),
    'page callback' => 'drupal_get_form',
    'title' => 'Advanced Forum',
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 *
 * Take over the forum page creation so we can add more information.
 */
function advanced_forum_menu_alter(&$callbacks) {
  $callbacks['forum']['page callback'] = advanced_forum_page;
}

/**
 * Implementation of hook_theme().
 */
function advanced_forum_theme() {
  $items['forum_user'] = array(
      'template' => 'advf-forum-user',
      'path' => advanced_forum_path_to_style(),
      'arguments' => array('account' => NULL),
  );
  
  return $items;
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function advanced_forum_theme_registry_alter(&$theme_registry) {
  // Kill the next/previous forum topic navigation links.
  foreach ($theme_registry['forum_topic_navigation']['preprocess functions'] as $key => $value) {
    if ($value = 'template_preprocess_forum_topic_navigation') {
      unset($theme_registry['forum_topic_navigation']['preprocess functions'][$key]);
    }
  }

  // Convince the theme registry that the style directory is a theme 
  // so the template files are found.
  $templates = array('node', 'comment', 'forums', 'forum_list', 'forum_topic_list', 'forum_icon', 'forum_submitted');
  foreach ($templates as $template) {
    $originalpath = array_shift($theme_registry[$template]['theme paths']);
    $modulepath = advanced_forum_path_to_style();
    array_unshift($theme_registry[$template]['theme paths'], $originalpath, $modulepath);
  }
}

/**
 * Defines the Advanced Forum settings form.
 */
function advanced_forum_settings_page() {
  $form['advanced_forum_style'] = array(
    '#type' => 'textfield',
    '#title' => t('Advanced forum style'),
    '#size' => 25,
    '#description' => t('Name of advanced forum style. Defaults to "advforum"'),
    '#default_value' => variable_get('advanced_forum_style', 'advforum'),
  );

  $form['advanced_forum_theme_all_comments'] = array(
    '#type' => 'radios',
    '#title' => t('Treat all site comments like forum comments'),
    '#options' => array(t("No"), t("Yes")),
    '#description' => t('Choosing yes causes advanced forum to consider every comment a forum comment and attempt to theme it that way. Some changes to your theme may be required.'),
    '#default_value' => variable_get('advanced_forum_theme_all_comments', 0),
  );

/*
Hidden options
variable_get('advanced_forum_show_created', TRUE)) {
variable_get('advforum_topic_pager_max', 5);
variable_get('advforum_get_new_comments', TRUE);
*/ 
  
  // Send our form to Drupal to make a settings page
  return system_settings_form($form);
}

/*****************************************************************************/
/*** TEMPLATE PREPROCESS *****************************************************/
/*****************************************************************************/

/**
 * Preprocesses template variables for the node template.
 */
function advanced_forum_preprocess_node(&$vars) {
  if (advanced_forum_treat_as_forum_post('node', $vars)) {
    if ($_GET['page'] > 0) { 
      // This is the repeated node on the top of subsequent pages.
      // We send this to a special .tpl so people can wipe it out or whatever
      $vars['template_files'][] = "advf-forum-repeat-post";
    }
    else {
      // Use our combined node/comment template file
      $vars['template_files'][] = "advf-forum-post";
    }

    // The node is the first post, aka topic
    $vars['top_post'] = TRUE;

    // Node is being shown in the forum (not on the front page or in a view)
    $vars['is_forum'] = TRUE;

    if (!empty($vars['node']->links) && !empty($vars['node']->links['comment_add'])) {
      // Change first post from "add comment" to "Reply"
      $vars['node']->links['comment_add']['title'] = t('Reply');
      $vars['links'] = theme('links', $vars['node']->links, array('class' => 'links inline forumlinks'));

      // Make a separate variable for the reply link so it can be put on top of the thread
      $reply_link = $vars['node']->links['comment_add'];
      $reply_link['title'] = t("Post Reply");
      $vars['reply_link'] = theme('links', array('topic_reply' => $reply_link), array('class' => 'forumlinks'));
    }

    // Make an array version of $links
    $vars['links_array'] = $vars['node']->links;

    // Jump to first unread comment
    $comment_count = $vars['comment_count'];
    if ($comment_count > 0) {
      $nid = $vars['node']->nid;
      $current_page = $_GET['page'];
      $number_new_comments = comment_num_new($nid);

      if ($number_new_comments > 0) {
        // Note that we are linking to the cid anchor rather than new because
        // the new links will be gone if we go to another page.
        $page_of_first_new = comment_new_page_count($comment_count, $number_new_comments, $vars['node']);
        $cid_of_first_new = advanced_forum_first_new_comment($nid);   
        $link_text = format_plural($number_new_comments, '1 new reply', '@count replies');
        $vars['jump_first_new'] = l($link_text, 
                                    'node/' . $nid, 
                                    array('query' => $page_of_first_new, 'fragment' => "comment-$cid_of_first_new"));
      }
    }

    // User information
    $vars['account'] = user_load(array('uid' => $vars['node']->uid));
    $vars['user_info_pane'] = theme('forum_user', $vars['account']);

    // Load the signature. 
    if (module_exists('signature_forum')) {
      // If Signature For Forums is installed, use that
      $vars['signature'] = signature_forum_get_signature($vars['node']);
    }
    elseif (variable_get('user_signatures', 0)) {
      // Otherwise load Drupal's built in one, if enabled.
      $vars['signature'] = check_markup($vars['account']->signature, $vars['node']->format);
    }
  }
}

/**
 * Preprocesses template variables for the comment template.
 */
function advanced_forum_preprocess_comment(&$vars) {
  if (advanced_forum_treat_as_forum_post('comment', $vars)) {
    // Use our combined node/comment template file
    $vars['template_files'][] = 'advf-forum-post';

    // Thread is being shown in the forum (not on the front page or in a view)
    $vars['is_forum'] = TRUE;

    // This is a comment, not the node.
    $vars['top_post'] = FALSE;

    // Just use the date for the submitted on.
    $vars['submitted'] = format_date($vars['comment']->timestamp);

    // Assign the comment to the content variable for consistancy with nodes.
    $vars['content'] = $vars['comment']->comment;

    // User information
    $accountid = $vars['comment']->uid;
    if ($accountid == 0) {
      // Anonymous user. Make a fake user object for theme_username
      $vars['account']->name = $vars['comment']->name;
      $vars['account']->homepage = $vars['comment']->homepage;
    }
    else {
      // Load up the real user object
      $vars['account'] = user_load(array('uid' => $vars['comment']->uid));
    }

    // Create the user info pane
    $vars['user_info_pane'] = theme('forum_user', $vars['account']);

    // Because the $links array isn't available here, we recreate it
    if (arg(1) != 'reply') {
      $node = node_load($vars['comment']->nid);
      $links = module_invoke_all('link', 'comment', $vars['comment'], 1);
      foreach (module_implements('link_alter') as $module) {
        $function = $module .'_link_alter';
        $function($node, $links);
      }
      unset($links['comment_parent']);
      $vars['links'] = theme('links', $links,array('class' => 'links forumlinks'));
      $vars['links_array'] = $links;
    }

    // Since we have to load the node anyway for our links trick, make it avail
    $vars['node'] = $node;

    // Title
    if (variable_get('comment_subject_field_' . $node->type, 1) == 0) {
      // if comment titles are disabled, don't display it.
      $vars['title'] = '';
    } 
    else {
      // Assign the subject to the title variable for consistancy with nodes.
      $vars['title'] = check_plain($vars['comment']->subject);
    }

    // Comment number with link
    if (!isset($post_number)) {
      static $post_number = 0;
    }
    _advanced_forum_topic_nid($vars['node']->nid);

    $post_per_page = _comment_get_display_setting('comments_per_page', $vars['node']);
    $page_number = $_GET['page'];
    if (!$page_number) {
      $page_number = 0;
    }

    $post_number++;
    $fragment = 'comment-' . $vars['comment']->cid;
    $query = ($page_number) ? 'page=' . $page_number : NULL;
    $linktext = '#' . (($page_number * $post_per_page) + $post_number);
    $linkpath = 'node/' . _advanced_forum_topic_nid();
    $vars['comment_link'] = l($linktext, $linkpath, array('query' => $query, 'fragment' => $fragment));;

    // Link to page created by Comment Page module, if it exists
    if (!empty($vars['comment']->page_url) && !(arg(0) == 'comment' && arg(1) == $vars['comment']->cid)) {
      $vars['page_link'] = l('(permalink)', $vars['comment']->page_url);
    }
    
    // Load the signature. 
    if (module_exists('signature_forum')) {
      // If Signature For Forums is installed, use that
      $vars['signature'] = signature_forum_get_signature($vars['comment']);
    }
    elseif (variable_get('user_signatures', 0)) {
      if ($vars['account']->signature) {
        // Otherwise load Drupal's built in one, if enabled.
        $vars['signature'] = check_markup($vars['account']->signature, $vars['comment']->format);
      }
    }
  }
}

/**
 * Preprocesses template variables for the user info template.
 */
function template_preprocess_forum_user(&$variables) {
  // The passed in $variables['account'] refers to the user who's info is in the pane.
  $account = $variables['account'];

  // Username
  $variables['name_raw'] =  theme('username', $account);
  $variables['name'] =  '<div class="username">' .$variables['name_raw'] . '</div>';

  // Avatar
  $variables['picture'] = theme('user_picture', $account);

  // Nothing else applies to anon users, so just stop here
  if ($variables['account']->uid == 0) {
    return;
  }

  // Join date / since
  $variables['joined_raw'] = preg_replace('/\s*-?\s*\d{2}:\d{2}\s*-?\s*/', '', format_date($account->created, 'small'));
  $variables['joined'] = '<div class="account-joined"><strong>' . t('Joined: ') . '</strong>' . $variables['joined_raw'] . '</div>';

  $variables['member_since_raw'] = format_interval(time() - $account->created);
  $variables['member_since'] = '<div class="account-member-since">' . t('Member since: ') . $variables['member_since_raw'] . '</div>';

  // Online status
  if (round((time()-$account->access)/60) < 15) {
    $variables['online_class'] = 'user-online';
    $variables['online_icon'] = theme('image', advanced_forum_path_to_images() . '/status_online.png', 'User is online', 'User is online', NULL, TRUE);
    $variables['online_text'] = t('Online');
    $variables['online_status'] = '<div class="user-online">' . $variables['online_icon'] . ' ' . $variables['online_text'] . '</div>';
  } 
  else {
    $variables['online_class'] = 'user-offline';
    $variables['online_icon'] = theme('image', advanced_forum_path_to_images() . '/status_offline.png', 'User is offline', 'User is offline', NULL, TRUE);
    $variables['online_text'] = t('Offline');
    $variables['online_status'] = '<div class="user-offline">' . $variables['online_icon'] . ' ' . $variables['online_text'] . '</div>';
  }

  //TODO: Move these into the new plugin system  
  if (module_exists('contact')) {
    include_once drupal_get_path('module', 'advanced_forum') . '/modules/contact.forum.inc';
    contact_preprocess_forum_user(&$variables);
  }
  
  if (module_exists('profile')) {
    include_once drupal_get_path('module', 'advanced_forum') . '/modules/profile.forum.inc';
    profile_preprocess_forum_user(&$variables);
  }
  
  if (module_exists('privatemsg')) {
    include_once drupal_get_path('module', 'advanced_forum') . '/modules/privatemsg.forum.inc';
    privatemsg_preprocess_forum_user(&$variables);
  }
  
  if (module_exists('user_stats')) {
    include_once drupal_get_path('module', 'advanced_forum') . '/modules/user_stats.forum.inc';
    user_stats_preprocess_forum_user(&$variables);
  }
  
  if (module_exists('userpoints')) {
    include_once drupal_get_path('module', 'advanced_forum') . '/modules/userpoints.forum.inc';
    userpoints_preprocess_forum_user(&$variables);
  }
}

/*****************************************************************************/
/*** FORUM MODULE THEME OVERRIDES ********************************************/
/*****************************************************************************/

/**
 * Preprocesses template variables for the forum template.
 */
function advanced_forum_preprocess_forums($variables) {
  $variables['template_files'][] = 'advf-forums';

  if (empty($variables['topics'])) {
    // We don't want the links on the top of the forum overview
    $variables['links_orig'] = $variables['links'];
    $variables['links'] = array();
  } 
  else {
    // Grab the forum description and make it available to the template file
    $forum = taxonomy_get_term($variables['tid']);
    $variables['forum_description'] = $forum->description;
  }

  // Add in the mark as read link if user has access
  if (advanced_forum_markasread_access()) {
    $tid = $variables['tid'];
    if ($tid) {
      $title = t('Mark all topics read');
      $link = "forum/markasread/$tid";
    } 
    else {
      $title = t('Mark all forums read');
      $link = "forum/markasread";
    }
    $variables['links']['markasread'] = array('title' => $title, 'href'=>$link);
    $variables['links_orig']['markasread'] = array('title' => $title, 'href'=>$link);
  }
}

/**
 * Preprocesses template variables for the forum list template.
 */
function advanced_forum_preprocess_forum_list(&$variables) {
  $variables['template_files'][] = 'advf-forum-list';
  
  global $user;
  foreach ($variables['forums'] as $id => $forum) {
    $variables['forums'][$id]->new_posts = 0;
    $variables['forums'][$id]->new_text_posts = '';
    $variables['forums'][$id]->new_url_posts = '';
    $variables['forums'][$id]->old_posts = $forum->num_posts;
    
    if ($user->uid) {
      if (variable_get('advforum_get_new_comments', TRUE)) {
        // This can cause performance issues, so allow it to be turned off
        $variables['forums'][$id]->new_posts = advanced_forum_unread_posts_in_forum($forum->tid, $user->uid) + $variables['forums'][$id]->new_topics; 
      }
      
      if ($variables['forums'][$id]->new_posts) {
        $variables['forums'][$id]->new_text_posts = format_plural($variables['forums'][$id]->new_posts, '1 new', '@count new');
        $variables['forums'][$id]->new_url_posts = url("forum/$forum->tid", array('fragment' => 'new'));
      }
      
      $variables['forums'][$id]->old_posts = $forum->num_posts - $variables['forums'][$id]->new_posts;
    }  
  }  
}

/**
 * Preprocesses template variables for the submitted by/in template.
 */
function advanced_forum_preprocess_forum_submitted(&$variables) {
  $variables['template_files'][] = 'advf-forum-submitted';

  if ($variables['topic']->node_title) {
    $nid = $variables['topic']->nid;
  
    // Make a fake node object to avoid the node load
    $node = new stdClass();
    $node->nid = $nid;
    $node->type = $variables['topic']->type;

    // Find the page of the first unread comment, if any
    $num_comments = db_result(db_query('SELECT COUNT(cid) FROM {comments} WHERE nid = %d', $nid));
    $new_replies = comment_num_new($nid);
    $query = comment_new_page_count($num_comments, $new_replies, $node);

    // Format the node title with a link
    $short_topic_title = truncate_utf8($variables['topic']->node_title, 15, TRUE, TRUE);
    $fragment = ($new_replies) ? 'new' : '';
    $variables['topic_link'] = l($short_topic_title, "node/$nid", array('query' => $query, 'fragment' => $fragment));
  }
}

/**
 * Preprocesses template variables for the topic list template.
 */
function advanced_forum_preprocess_forum_topic_list(&$variables) {
  // Take control of the template file.
  $variables['template_files'][] = 'advf-forum-topic-list';

  // Redo the table header so we can add in views. 
  global $forum_topic_list_header;

  $forum_topic_list_header = array();
  $forum_topic_list_header[] = array('data' => '&nbsp;', 'class' => 'column_icon');
  $forum_topic_list_header[] = array('data' => t('Topic'), 'field' => 'n.title', 'class' => 'column_topic');
  $forum_topic_list_header[] = array('data' => t('Replies'), 'field' => 'l.comment_count', 'class' => 'column_replies');
  
  // Topic views require the statistics module so don't show if it's not enabled
  if (module_exists('statistics')) {
    $forum_topic_list_header[] =  array('data' => t('Views'), 'class' => 'column_views');
  }
  
  // Allow admins to turn off the created column
  if (variable_get('advanced_forum_show_created', TRUE)) {
    $forum_topic_list_header[] =  array('data' => t('Created'), 'field' => 'n.created', 'class' => 'column_created');
  }
  
  $forum_topic_list_header[] =  array('data' => t('Last reply'), 'field' => 'l.last_comment_timestamp', 'class' => 'column_lreply');

  // Create the tablesorting header.
  $ts = tablesort_init($forum_topic_list_header);
  $header = '';
  foreach ($forum_topic_list_header as $cell) {
    $cell = tablesort_header($cell, $forum_topic_list_header, $ts);
    $header .= _theme_table_cell($cell, TRUE);
  }
  $variables['header'] = $header;

  // Grab the forum description and make it available to the template file
  $forum = taxonomy_get_term($variables['topic_id']);
  $variables['forum_description'] = $forum->description;

  // Do our own topic processing.
  if (!empty($variables['topics'])) {
    $row = 0;

    // Find out how many pages to show on the topic pager. We do this outside
    // the loop because it will be the same for all topics.
    $max_pages_to_display = variable_get('advforum_topic_pager_max', 5);

    foreach ($variables['topics'] as $id => $topic) {
      // Get a pager to add to the topic, if there is one
      $variables['topics'][$id]->pager = _advanced_forum_create_topic_pager($max_pages_to_display, $topic);

      // Make shadow copy point to actual thread and tell you new the forum name
      if ($variables['topics'][$id]->moved == TRUE) {
        $term = taxonomy_get_term($topic->tid);
        $variables['topics'][$id]->message = l(t('This topic has been moved to ') . $term->name, "node/$topic->nid");
      }

      // Send the NID into the icon theme code so it can be linked to the topic
      $variables['topics'][$id]->icon = theme('forum_icon', $topic->new, $topic->num_comments, $topic->comment_mode, $topic->sticky, $topic->nid);

      // Add in the number of views
      if (module_exists('statistics')) {
        $variables['topics'][$id]->views =  _advanced_forum_get_topic_views_count($topic->nid);
      }
      
      // Set classes based on stickiness. This allows themers to seperate out
      // all the sticky posts into their own section.
      if ($topic->sticky) {
        $sticky_class = 'sticky-topic';
        $was_sticky = TRUE;
      } 
      elseif ($wassticky) {
        $sticky_class = 'first-not-sticky not-sticky';
        $was_sticky = FALSE;
      } 
      else {
        $sticky_class  = 'not-sticky';
      }
      
      $topic->sticky_class = $sticky_class;      

    }      
  }
}

/**
 * Preprocesses template variables for the forum icon template.
 */
function advanced_forum_preprocess_forum_icon(&$variables) {
  $variables['template_files'][] = 'advf-forum-icon';

  $variables['iconpath'] = advanced_forum_path_to_images();
}

// This one is exclusive to advanced forum
function advanced_forum_preprocess_forum_post(&$variables) {
  $variables['template_files'][] = 'advf-forum-post';
}

/*****************************************************************************/
/*** THEME RELATED ***********************************************************/
/*****************************************************************************/


include_once drupal_get_path('module', 'advanced_forum') . '/advf-plugins.inc';

function advanced_forum_advforum_styles() {
  $items = array();
  $items['naked'] = array(
    'directory' => 'styles/naked',
  );

  $items['flatgrey'] = array(
    'directory' => 'styles/flatgrey',
  );
  
  return $items;
}

/**
 * Returns the name of the forum style to use.
 */
function advanced_forum_get_current_style() {
  return variable_get('advanced_forum_style', 'naked');
}

/**
 * Returns the path to the advanced forum style, including the style name
 */
function advanced_forum_path_to_style() {
  static $style_path;
  
  if (!$style_path) {
    // Retrieve the style name 
    $style = advanced_forum_get_current_style();
    
    // Get the path information
    $style_info = advanced_forum_get_style($style);
    $style_path = $style_info['path'];    
  }

  return $style_path;
}

function advanced_forum_path_to_images() {
  static $image_path;
  
  if (!$image_path) {
    $image_path = advanced_forum_path_to_style() . '/images';
  }
  
  return $image_path;
}

/**
 * This function returns true if the node/comment should be themed and 
 * otherwise treated as a forum post.
 */
function advanced_forum_treat_as_forum_post($hook, $vars) {
  // Setting this static means the check only needs to be done once per thread
  static $forum_node_id;

  switch ($hook) {
    case 'node':
      $vid = variable_get('forum_nav_vocabulary', '');
      $vocabulary = taxonomy_vocabulary_load($vid);
      if (empty($vocabulary) || !in_array($vars['node']->type, $vocabulary->nodes)) {
        // No forum vocabulary or the node type cannot be used in the forums
        unset($forum_node_id);
        return false;
      }

      // Get a list of the terms attached to this node
      $terms = taxonomy_node_get_terms_by_vocabulary($vars['node'], $vid);
      if (count($terms) > 0 && (arg(0) == 'node' && is_numeric(arg(1)) && arg(1) == $vars['node']->nid || arg(0) == 'comment')) {
        // The node has at least one forum term attached to it and is not being
        // shown on some other page (like a view or promoted to front page)
        $forum_node_id = $vars['node']->nid;
        return true;
      }
      else {
        // We've hit a non forum node
        unset($forum_node_id);
        return false;
      }

    case 'comment':
      if (isset($forum_node_id) && ($vars['comment']->nid == $forum_node_id)) {
        // We already know this comment is either part of a forum thread
        // or that comments on this thread are known exceptions.
        return true;
      } 
      else {
        // Not part of a forum thread. Check for exceptions.
        if (variable_get("advanced_forum_theme_all_comments", 0) == 1) {
          // This site wants all comments to use the forum comment template
          $forum_node_id = $vars['comment']->nid;
          return true;
        }

        if (arg(0) == 'comment' && is_numeric(arg(1))) {
          // Comment is being shown alone via the comment_page module
          // For now, assume those should be themed like the forums.
          // TODO: Possibly add a setting for this?
          $forum_node_id = $vars['comment']->nid;
          return true;
        }

        // Comment is not part of a forum thread and there are no exceptions.
        return false;
      }

    default:
      // We only deal with nodes and comments
      return false;
  }
}

/*****************************************************************************/
/*** MARK AS READ ************************************************************/
/*****************************************************************************/

/**
 * Marks all posts in forums or in a given forum as read by the current user.
 */
function advanced_forum_markasread() {
  global $user;

  // See if we're on a forum or on the forum overview
  // Path will be /forum/markasread or /forum/markasread/tid
  $current_forum_id = arg(2);

  if ($current_forum_id) {
    // Combine INSERT with SELECT+SUBSELECT that will return rows that are not
    // present in the history table, marking all unread nodes as read
    $sql = 'INSERT INTO {history} (uid,nid,timestamp)'
           .' SELECT %d, n.nid, %d FROM {node} AS n'
           .' INNER JOIN {term_node} AS tn ON n.nid=tn.nid'
           .' INNER JOIN {node_comment_statistics} AS ncs ON ncs.nid=n.nid'
           .' WHERE (n.created > %d OR ncs.last_comment_timestamp > %d)'
           .' AND tn.tid = %d'
           .' and n.nid not in ( SELECT nid FROM {history} AS h WHERE h.nid = n.nid AND h.uid = %d)';

    $args = array($user->uid, time(), NODE_NEW_LIMIT, NODE_NEW_LIMIT, $current_forum_id, $user->uid);

    db_query($sql, $args);

    drupal_set_message(t('All content in this forum has been marked as read'));
    drupal_goto('forum/'. $current_forum_id);
  } 
  else {
    // We are on the forum overview, requesting all forums be marked read
    $forum_vocabulary_id = variable_get('forum_nav_vocabulary', '');
 
    // Combine INSERT with SELECT+SUBSELECT that will return rows that are not
    // present in the history table, marking all unread nodes as read.
    // This version adds another subselect to get all forums
    $sql = 'INSERT INTO {history} (uid,nid,timestamp)'
           .' SELECT %d, n.nid, %d FROM {node} AS n'
           .' INNER JOIN {term_node} AS tn ON n.nid=tn.nid' 
           .' INNER JOIN {node_comment_statistics} AS ncs ON ncs.nid=n.nid'
           .' WHERE (n.created > %d OR ncs.last_comment_timestamp > %d)'
           .' and n.nid not in ( SELECT nid FROM {history} AS h WHERE h.nid = n.nid AND h.uid = %d)'
           .' AND tn.tid in (SELECT tid FROM {term_data} WHERE vid = %d)';

    $args = array($user->uid, time(), NODE_NEW_LIMIT, NODE_NEW_LIMIT, $user->uid, $forum_vocabulary_id);

    db_query($sql, $args);

    drupal_set_message(t('All forum content been marked as read'));
    drupal_goto('forum');
  }
}

/**
 * Access callback for menus and link display.
 *
 * This separate function is needed because the Drupal 6 menu system doesn't
 * run hook_menu() every time and the logged-in status of the user can get
 * cached and re-used for other users.
 */
function advanced_forum_markasread_access() {
  global $user;
  return user_access('access content') && $user->uid;
}

/*****************************************************************************/
/*** GENERAL FUNCTIONS *******************************************************/
/*****************************************************************************/

/**
 * Holds the node ID of the thread we are on.
 *
 * Used for linking the comment numbers.
 *
 * @param $nid
 *   Node ID
 */
function _advanced_forum_topic_nid($nodeid = 0) {
  static $nid;

  if (!empty($nodeid)) {
    $nid = $nodeid;
  }

  return $nid;
}

/**
 * Returns the ID of the first unread comment.
 *
 * @param $nid
 *   Node ID
 * @param $timestamp
 *   Date/time used to override when the user last viewed the node.
 * @return
 *   Comment ID
 */
function advanced_forum_first_new_comment($nid, $timestamp = 0) {
  global $user;

  if ($user->uid) {
    // Retrieve the timestamp at which the current user last viewed the
    // specified node.
    if (!$timestamp) {
      $timestamp = node_last_viewed($nid);
    }
    $timestamp = ($timestamp > NODE_NEW_LIMIT ? $timestamp : NODE_NEW_LIMIT);

    // Use the timestamp to retrieve the oldest new comment.
    $result = db_result(db_query('SELECT c.cid FROM {node} n INNER JOIN {comments} c ON n.nid = c.nid WHERE n.nid = %d AND timestamp > %d AND c.status = %d ORDER BY c.cid LIMIT 1', $nid, $timestamp, COMMENT_PUBLISHED));

    return $result;
  }
  else {
    return 0;
  }
}

/**
 * Creates a pager to place on each multi-page topic of the topic listing page.
 *
 * @param $max_pages_to_display
 *   Number of pages to include on the pager.
 * @param $topic
 *   Topic object to create a pager for.
 * @return
 *   Asembled pager.
 */
function _advanced_forum_create_topic_pager($max_pages_to_display, $topic) {
  // Find the number of comments per page for the node type of the topic.
  // It's the same for all types in D5, but varies in D6.
  $comments_per_page = _comment_get_display_setting('comments_per_page', $topic);

  if ($max_pages_to_display > 0 && $topic->num_comments > $comments_per_page) {
    // Topic has more than one page and a pager is wanted. Start off the
    // first page because that doesn't have a query.
    $pager_array = array();
    $current_display_page = 1;
    $pager_array[] = l('1', "node/$topic->nid");

    // Find the ending point. The pager URL is always 1 less than
    // the number being displayed because the first page is 0.
    $last_display_page = ceil($topic->num_comments / $comments_per_page);
    $last_pager_page = $last_display_page - 1;

    // Add pages until we run out or until we hit the max to show.
    while (($current_display_page < $last_display_page) && ($current_display_page < $max_pages_to_display)) {
      // Move to the next page
      $current_display_page++;

      // The page number we link to is 1 less than what's displayed
      $link_to_page = $current_display_page - 1;

      // Add the link to the array
      $pager_array[] =  l($current_display_page, "node/$topic->nid", array('query' => 'page=' . $link_to_page));
    }

    // Move to the next page
    $current_display_page++;

    if ($current_display_page == $last_display_page) {
      // We are one past the max to display, but it's the last page,
      // so putting the ...last is silly. Just display it normally.
      $link_to_page = $current_display_page - 1;
      $pager_array[] =  l($current_display_page, "node/$topic->nid", array('query' => 'page=' . $link_to_page));
    }

    $pager_last = '';
    if ($current_display_page < $last_display_page) {
      // We are one past the max to display and still aren't
      // on the last page, so put in ... Last Page(N)
      $text = t('Last Page') . '(' . $last_display_page . ')';
      $pager_last = ' &hellip; ' . l($text, "node/$topic->nid", array('query' => 'page=' . $last_pager_page));
    }

    // Put it all together
    return '[' . t('Page') . ' '. implode(", ", $pager_array) . $pager_last . ']';
  }
}

/**
 * Retrieves a forum topic's "views count".
 *
 * @param $nid
 *   Node ID
 * @return
 *   Total number of times that node has been viewed.
 */
function _advanced_forum_get_topic_views_count($nid) {
  if ($nid > 0) {
    $views_count = db_result(db_query('SELECT totalcount FROM {node_counter} WHERE nid = %d', $nid));
  }

  // Make sure it's 0, not blank, for better display.
  if (empty($views_count)) {
    $views_count = 0;
  }
  return $views_count;
}

/**
 * Menu callback; prints a forum listing.
 *
 * This is copied from the forum module and adapted.
 */
function advanced_forum_page($tid = 0) {
  $topics = '';
  $forum_per_page = variable_get('forum_per_page', 25);
  $sortby = variable_get('forum_order', 1);

  $forums = advanced_forum_get_forums($tid);
  $parents = taxonomy_get_parents_all($tid);
  if ($tid && !in_array($tid, variable_get('forum_containers', array()))) {
    $topics = forum_get_topics($tid, $sortby, $forum_per_page);
  }

  return theme('forums', $forums, $topics, $parents, $tid, $sortby, $forum_per_page);
}

/**
 * Returns a list of all forums for a given taxonomy id
 *
 * This is copied from the forum module and adapted.
 *
 * Forum objects contain the following fields
 * -num_topics Number of topics in the forum
 * -num_posts Total number of posts in all topics
 * -last_post Most recent post for the forum
 *
 * @param $tid
 *   Taxonomy ID of the vocabulary that holds the forum list.
 * @return
 *   Array of object containing the forum information.
 */
function advanced_forum_get_forums($tid = 0) {

  $forums = array();
  $vid = variable_get('forum_nav_vocabulary', '');
  $_forums = taxonomy_get_tree($vid, $tid);

  if (count($_forums)) {

    $counts = array();

    $sql = "SELECT r.tid, COUNT(n.nid) AS topic_count, SUM(l.comment_count) AS comment_count 
            FROM {node} n 
            INNER JOIN {node_comment_statistics} l ON n.nid = l.nid 
            INNER JOIN {term_node} r ON n.vid = r.vid 
            WHERE n.status = 1 
            GROUP BY r.tid";
    $sql = db_rewrite_sql($sql);
    $_counts = db_query($sql);
    while ($count = db_fetch_object($_counts)) {
      $counts[$count->tid] = $count;
    }
  }

  foreach ($_forums as $forum) {
    // Check if this term is a container
    if (in_array($forum->tid, variable_get('forum_containers', array()))) {
      $forum->container = 1;
    }

    if (!empty($counts[$forum->tid])) {
      $forum->num_topics = $counts[$forum->tid]->topic_count;
      $forum->num_posts = $counts[$forum->tid]->topic_count + $counts[$forum->tid]->comment_count;
    }
    else {
      $forum->num_topics = 0;
      $forum->num_posts = 0;
    }

    // This query does not use full ANSI syntax since MySQL 3.x does not support
    // table1 INNER JOIN table2 INNER JOIN table3 ON table2_criteria ON table3_criteria
    // used to join node_comment_statistics to users.
    $sql = "SELECT n.nid, n.title, n.type,
                   ncs.last_comment_timestamp, 
                   IF (ncs.last_comment_uid != 0, u2.name, ncs.last_comment_name) AS last_comment_name, 
                   ncs.last_comment_uid 
            FROM {node} n 
            INNER JOIN {users} u1 ON n.uid = u1.uid 
            INNER JOIN {term_node} tn ON n.vid = tn.vid 
            INNER JOIN {node_comment_statistics} ncs ON n.nid = ncs.nid 
            INNER JOIN {users} u2 ON ncs.last_comment_uid=u2.uid 
            WHERE n.status = 1 AND tn.tid = %d 
            ORDER BY ncs.last_comment_timestamp DESC";
    $sql = db_rewrite_sql($sql);
    $topic = db_fetch_object(db_query_range($sql, $forum->tid, 0, 1));

    $last_post = new stdClass();
    if (!empty($topic->last_comment_timestamp)) {
      $last_post->timestamp = $topic->last_comment_timestamp;
      $last_post->name = $topic->last_comment_name;
      $last_post->uid = $topic->last_comment_uid;
      $last_post->nid = $topic->nid;
      // Note, we call it "node_title" otherwise it gets picked up on the  
      // topic list as well.
      $last_post->node_title = $topic->title;
      $last_post->type = $topic->type;
    }
    $forum->last_post = $last_post;

    $forums[$forum->tid] = $forum;
  }

  return $forums;
}

function advanced_forum_unread_posts_in_forum($tid, $uid) {
  $sql = "SELECT COUNT(c.cid) FROM {comments} c INNER JOIN {node} n INNER JOIN {term_node} tn ON c.nid = n.nid AND c.nid = tn.nid AND tn.tid = %d LEFT JOIN {history} h ON c.nid = h.nid AND h.uid = %d WHERE n.status = 1 AND n.type = 'forum' AND c.timestamp > h.timestamp";
  $sql = db_rewrite_sql($sql);
  return db_result(db_query($sql, $term, $uid, NODE_NEW_LIMIT));
}