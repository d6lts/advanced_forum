<?php
// $Id$

/**
 * @file
 * Enables the look and feel of other popular forum software.
 */

// DRUPAL HOOKS **************************************************************/

/**
 * Implementation of hook_init().
 */
function advanced_forum_init() {
  // load in the advanced forum theme if we're in a forum, or viewing a node.
  if (arg(0) == 'forum' || ($node = menu_get_object())) {
    $style_directory = advanced_forum_path_to_style();

    foreach (array('advanced_forum-structure.css', 'advanced_forum.css') as $filename) {
      $css_file = path_to_theme() . '/' . $filename;
      if (!file_exists($css_file)) {
        $css_file = $style_directory . '/' . $filename;
      }

      drupal_add_css($css_file);
    }

    _advanced_forum_load_preprocessors();
    
    drupal_add_js(drupal_get_path('module', 'advanced_forum') . '/advanced_forum.js');
    drupal_add_js(array('advanced_forum_ajax' => url('advanced_forum/collapse')), 'setting');
  }
}

/**
 * Implementation of hook_perm().
 */
function advanced_forum_perm() {
  return array('administer advanced forum');
}

/**
 * Implementation of hook_menu().
 */
function advanced_forum_menu() {
    $items['forum/markasread'] = array(
    'access callback' => 'advanced_forum_markasread_access',
    'page callback' => 'advanced_forum_markasread',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/advanced-forum'] = array(
    'access arguments' => array('administer advanced forum'),
    'description' => 'Configure Advanced Forum with these settings.',
    'page arguments' => array('advanced_forum_settings_page'),
    'page callback' => 'drupal_get_form',
    'title' => 'Advanced Forum',
  );
  $items['advanced_forum/collapse'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'advanced_form_ajax',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 *
 * Take over the forum page creation so we can add more information.
 */
function advanced_forum_menu_alter(&$callbacks) {
  $callbacks['forum']['page callback'] = 'advanced_forum_page';
}

/**
 * Implementation of hook_theme().
 */
function advanced_forum_theme() {
  _advanced_forum_load_preprocessors();
  $items['forum_user'] = array(
      'template' => 'advf-forum-user',
      'path' => advanced_forum_path_to_style(),
      'arguments' => array('account' => NULL),
  );
  
  return $items;
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function advanced_forum_theme_registry_alter(&$theme_registry) {
  // Kill the next/previous forum topic navigation links.
  if (!variable_get('advanced_forum_use_topic_navigation', FALSE)) {
    foreach ($theme_registry['forum_topic_navigation']['preprocess functions'] as $key => $value) {
      if ($value = 'template_preprocess_forum_topic_navigation') {
        unset($theme_registry['forum_topic_navigation']['preprocess functions'][$key]);
      }
    }
  }

  // --- The following section manipulates the theme registry so the .tpl files 
  // --- for the given templates can be found first in the (sub)theme directory
  // --- then in ancestor themes, if any, and finally in the designated styles
  // --- directory for advanced forum.
  
  // Affected templates
  $templates = array('node', 'comment', 'comment_wrapper', 'forums', 'forum_list', 'forum_topic_list', 'forum_icon', 'forum_submitted');
  
  // Find all our ancestor themes and put them in an array.
  global $theme;
  $themes = list_themes();

  $ancestor_paths = array();
  $ancestor = $theme;
  while ($ancestor && isset($themes[$ancestor]->base_theme)) {
    array_unshift($ancestor_paths, dirname($themes[$themes[$ancestor]->base_theme]->filename));
    $ancestor = $themes[$ancestor]->base_theme;
  }
  
  foreach ($templates as $template) {
    // If there was a path in there, store it
    $originalpath = array_shift($theme_registry[$template]['theme paths']);
    
    // Add in the style directory
    $modulepath = advanced_forum_path_to_style();
    
    // Restore the original path
    array_unshift($theme_registry[$template]['theme paths'], $originalpath, $modulepath);
    
    // If there are any ancestor paths (ie: we are in a subtheme, add those)
    foreach($ancestor_paths as $ancestor_path) {
      $theme_registry[$template]['theme paths'][] = $ancestor_path;
    }
    
    // Put the active theme's path last since that takes precidence
    $theme_registry[$template]['theme paths'][] = path_to_theme();
  }
}

// SETTINGS PAGE *************************************************************/

/**
 * Defines the Advanced Forum settings form.
 */
function advanced_forum_settings_page() {
  // Choose style
  $options = array();
  $available_styles = advanced_forum_get_styles();
  foreach ($available_styles as $style_name => $style) {
    $options[$style_name] = $style_name;
  }

  $form['advanced_forum_style'] = array(
    '#type' => 'select',
    '#title' => t('Advanced forum style'),
    '#options' => $options,
    '#description' => t('Choose which style to use for your forums. This will apply independent of site theme.'),
    '#default_value' => variable_get('advanced_forum_style', 'naked'),
  );

  // Use buttons for links
  $form['advanced_forum_button_links'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use graphical buttons for links'),
    '#default_value' => variable_get('advanced_forum_button_links', 1),
    '#description' => t('Included buttons are in English. Uncheck this to use translatable links instead.'),
  );
  
  // Choose image directory
  $form['advanced_forum_image_directory'] = array(
    '#type' => 'textfield',
    '#title' => t('Image directory'),
    '#size' => 50,
    '#description' => t('Images are assumed to be in the "images" subdirectory of your style. If you need images to be somewhere else, put the full path here.'),
    '#default_value' => variable_get('advanced_forum_image_directory', ''),
  );

  // Theme all site comments as forums
  $form['advanced_forum_theme_all_comments'] = array(
    '#type' => 'checkbox',
    '#title' => t('Treat all site comments like forum comments'),
    '#default_value' => variable_get('advanced_forum_theme_all_comments', 0),
    '#description' => t('Choosing yes causes advanced forum to consider every comment a forum comment and attempt to theme it that way. Some changes to your theme may be required.'),
  );

  // Collapsible containers
  $options = array();
  $containers = variable_get('forum_containers', array());
  $forums_including_containers = advanced_forum_get_forum_list();
  foreach($forums_including_containers as $forum_or_container) {
    if (in_array($forum_or_container->tid, $containers)) {
      $options[$forum_or_container->tid] = $forum_or_container->name;
    }
  }

  $form['advanced_forum_collapse_defaults'] = array(
    '#type' => 'checkboxes', 
    '#title' => t('Default collapsed containers'), 
    '#default_value' => variable_get('advanced_forum_collapse_defaults', array()),
    '#options' => $options,
    '#description' => t('Check containers to collapse by default.'),
  );

  // Hide 'created' column
  $form['advanced_forum_hide_created'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide the created column on the topic list.'),
    '#default_value' => variable_get('advanced_forum_hide_created', 0),
    '#description' => t('This allows you to hide the created column on the topic list. Useful if you want to move the created by information to underneath the topic title.'),
  );
  
  // Pager max
  $form['advanced_forum_topic_pager_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of pages to show on per title pager'),
    '#size' => 5,
    '#description' => t('Used on the pager under topic titles in topic list. e.g. entering 5 will get you 1,2,3,4 ... 10'),
    '#default_value' => variable_get('advanced_forum_topic_pager_max', 5),
  );

  // Retrieve new comments on forum listing
  $form['advanced_forum_get_new_comments'] = array(
    '#type' => 'checkbox',
    '#title' => t('Get the number of new comments per forum on the forum list'),
    '#default_value' => variable_get('advanced_forum_get_new_comments', 0),
    '#description' => t('Core forum shows the number of new topics. If checked, Advanced Forum will get the number of new comments as well and show it under "posts" on the forum overview. Slow query not recommended on large forums.'),
  );

  // Use topic navigation
  $form['advanced_forum_use_topic_navigation'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use topic navigation'),
    '#default_value' => variable_get('advanced_forum_use_topic_navigation', 0),
    '#description' => t('Core forum gets the next and previous topics and shows links to them under the top post. This is turned off by default as the query has performance issues and the placement of the links is poor.'),
  );
  
  
  // Send our form to Drupal to make a settings page
  return system_settings_form($form);
}

// TEMPLATE PREPROCESS *******************************************************/

/**
 * Load advanced forum preprocessors includes on behalf of modules.
 */
function _advanced_forum_load_preprocessors() {
  // forum.inc is the extension on the includes such as contact.forum.inc
  advanced_forum_include('forum.inc');
}

/**
 * Load advanced forum files on behalf of modules.
 *
 * Blatent rip of views include system.
 */
function advanced_forum_include($file) {
  $includes = array();
  $cache = cache_get('advforum_includes');
  if (isset($cache->data) && $cache->data) {
    $includes = $cache->data;
  }
  else {
    $advanced_forum_path = drupal_get_path('module', 'advanced_forum') . '/modules';
    foreach (module_list() as $module) {
      $module_path = drupal_get_path('module', $module);
      if (file_exists("$module_path/$module.$file")) {
        $includes[] = "./$module_path/$module.$file";
      }
      else if (file_exists("$module_path/includes/$module.$file")) {
        $includes[] = "./$module_path/includes/$module.$file";
      }
      else if (file_exists("$advanced_forum_path/$module.$file")) {
        $includes[] = "./$advanced_forum_path/$module.$file";
      }
    }
    cache_set('advforum_includes', $includes);
  }

  if (!empty($includes)) {
    foreach ($includes as $include) {
      require_once $include;
    }
  }
}

/**
 * Preprocesses template variables for the node template.
 */
function advanced_forum_preprocess_node(&$vars) {
  if (advanced_forum_treat_as_forum_post('node', $vars)) {
    if (isset($_GET['page']) && $_GET['page'] > 0) { 
      // This is the repeated node on the top of subsequent pages.
      // We send this to a special .tpl so people can wipe it out or whatever
      $vars['template_files'][] = "advf-forum-repeat-post";
    }
    else {
      // Use our combined node/comment template file
      $vars['template_files'][] = "advf-forum-post";
    }

    // The node is the first post, aka topic
    $vars['top_post'] = TRUE;

    // Node is being shown in the forum (not on the front page or in a view)
    $vars['is_forum'] = TRUE;

    if (!empty($vars['node']->links) && !empty($vars['node']->links['comment_add'])) {
      // Change first post from "add comment" to "Reply"
      $vars['node']->links['comment_add']['title'] = t('Reply');

      // Make a separate variable for the reply link so it can be put on top of the thread
      $reply_link = $vars['node']->links['comment_add'];
      
      if (variable_get('advanced_forum_button_links', 1)) {
        $reply_link['title'] = theme('image', advanced_forum_path_to_images() . '/' . 'post-reply.png');
        $reply_link['html'] = TRUE;
      }
      else {
        $reply_link['title'] = t("Post Reply");
      }
      $vars['reply_link'] = theme('links', array('topic_reply' => $reply_link), array('class' => 'forumlinks'));
    }
    
    // Iconify common links (optional to avoid translation issues)
    if (variable_get('advanced_forum_button_links', 1)) {
      if (!empty($vars['node']->links['comment_add']['title'])) {
        $vars['node']->links['comment_add']['title'] = theme('image', advanced_forum_path_to_images() . '/' . 'reply.png');
        $vars['node']->links['comment_add']['html'] = TRUE;
      }
      if (!empty($vars['node']->links['quote']['title'])) {
        $vars['node']->links['quote']['title'] = theme('image', advanced_forum_path_to_images() . '/' . 'quote.png');
        $vars['node']->links['quote']['html'] = TRUE;
      }
      if (!empty($vars['node']->links['edit']['title'])) {
        $vars['node']->links['edit']['title'] = theme('image', advanced_forum_path_to_images() . '/' . 'edit.png');
        $vars['node']->links['edit']['html'] = TRUE;
      }
      if (!empty($vars['node']->links['delete']['title'])) {
        $vars['node']->links['delete']['title'] = theme('image', advanced_forum_path_to_images() . '/' . 'delete.png');
        $vars['node']->links['delete']['html'] = TRUE;
      }
    }
    
    // Remake the links with our changes
    $vars['links'] = theme('links', $vars['node']->links, array('class' => 'links inline forumlinks'));

    // Make an array version of $links
    $vars['links_array'] = $vars['node']->links;

    // Jump to first unread comment
    $comment_count = $vars['comment_count'];
    if ($comment_count > 0) {
      $nid = $vars['node']->nid;
      $current_page = $_GET['page'];
      $number_new_comments = comment_num_new($nid);

      $vars['jump_first_new'] = format_plural($comment_count, '1 ' . t('reply'), '@count ' . t('replies'));
      if ($number_new_comments > 0) {
        // Note that we are linking to the cid anchor rather than "new" because
        // the new links will be gone if we go to another page.
        $page_of_first_new = comment_new_page_count($comment_count, $number_new_comments, $vars['node']);
        $cid_of_first_new = advanced_forum_first_new_comment($nid);   
        $vars['jump_first_new'] .= " (" . l($number_new_comments . ' ' . t('new'), 
                                    'node/' . $nid, 
                                    array('query' => $page_of_first_new, 'fragment' => "comment-$cid_of_first_new")) .
                                    ")";
      }
    }

    // User information
    $vars['account'] = user_load(array('uid' => $vars['node']->uid));
    $vars['user_info_pane'] = theme('forum_user', $vars['account']);

    // Load the signature. 
    if (module_exists('signature_forum')) {
      // If Signature For Forums is installed, use that
      $vars['signature'] = signature_forum_get_signature($vars['node']);
    }
    elseif (variable_get('user_signatures', 0)) {
      // Otherwise load Drupal's built in one, if enabled.
      $vars['signature'] = check_markup($vars['account']->signature, $vars['node']->format);
    }
  }
}

/**
 * Preprocesses template variables for the comment template.
 */
function advanced_forum_preprocess_comment(&$vars) {
  if (advanced_forum_treat_as_forum_post('comment', $vars)) {
    // Use our combined node/comment template file
    $vars['template_files'][] = 'advf-forum-post';

    // Thread is being shown in the forum (not on the front page or in a view)
    $vars['is_forum'] = TRUE;

    // This is a comment, not the node.
    $vars['top_post'] = FALSE;

    // Just use the date for the submitted on.
    $vars['submitted'] = format_date($vars['comment']->timestamp);

    // Assign the comment to the content variable for consistancy with nodes.
    $vars['content'] = $vars['comment']->comment;

    // User information
    $accountid = $vars['comment']->uid;
    if ($accountid == 0) {
      // Anonymous user. Make a fake user object for theme_username
      $vars['account']->name = $vars['comment']->name;
      $vars['account']->homepage = $vars['comment']->homepage;
    }
    else {
      // Load up the real user object
      $vars['account'] = user_load(array('uid' => $vars['comment']->uid));
    }

    // Create the user info pane
    $vars['user_info_pane'] = theme('forum_user', $vars['account']);

    if (arg(1) != 'reply') {
      // Because the $links array isn't available here, we recreate it
      $node = node_load($vars['comment']->nid);
      $links = module_invoke_all('link', 'comment', $vars['comment'], 1);
      foreach (module_implements('link_alter') as $module) {
        $function = $module .'_link_alter';
        $function($node, $links);
      }
      unset($links['comment_parent']);

      // Iconify common links (optional to avoid translation issues)
      if (variable_get('advanced_forum_button_links', 1)) {
        if (!empty($links['comment_reply']['title'])) {
          $links['comment_reply']['title'] = theme('image', advanced_forum_path_to_images() . '/' . 'reply.png');
          $links['comment_reply']['html'] = TRUE;
        }
        if (!empty($links['quote']['title'])) {
          $links['quote']['title'] = theme('image', advanced_forum_path_to_images() . '/' . 'quote.png');
          $links['quote']['html'] = TRUE;
        }
        if (!empty($links['comment_edit']['title'])) {
          $links['comment_edit']['title'] = theme('image', advanced_forum_path_to_images() . '/' . 'edit.png');
          $links['comment_edit']['html'] = TRUE;
        }
        if (!empty($links['comment_delete']['title'])) {
          $links['comment_delete']['title'] = theme('image', advanced_forum_path_to_images() . '/' . 'delete.png');
          $links['comment_delete']['html'] = TRUE;
        }
      }
      
      // Remake the links with our changes
      $vars['links'] = theme('links', $links, array('class' => 'links forumlinks'));
      $vars['links_array'] = $links;

    }

    // Since we have to load the node anyway for our links trick, make it avail
    $vars['node'] = $node;

    // Title
    if (variable_get('comment_subject_field_' . $node->type, 1) == 0) {
      // if comment titles are disabled, don't display it.
      $vars['title'] = '';
    } 
    else {
      // Assign the subject to the title variable for consistancy with nodes.
      $vars['title'] = check_plain($vars['comment']->subject);
    }

    // Comment number with link
    if (!isset($post_number)) {
      static $post_number = 0;
    }
    _advanced_forum_topic_nid($vars['node']->nid);

    $post_per_page = _comment_get_display_setting('comments_per_page', $vars['node']);
    $page_number = $_GET['page'];
    if (!$page_number) {
      $page_number = 0;
    }

    $post_number++;
    $fragment = 'comment-' . $vars['comment']->cid;
    $query = ($page_number) ? 'page=' . $page_number : NULL;
    $linktext = '#' . (($page_number * $post_per_page) + $post_number);
    $linkpath = 'node/' . _advanced_forum_topic_nid();
    $vars['comment_link'] = l($linktext, $linkpath, array('query' => $query, 'fragment' => $fragment));;

    // Link to page created by Comment Page module, if it exists
    if (!empty($vars['comment']->page_url) && !(arg(0) == 'comment' && arg(1) == $vars['comment']->cid)) {
      $vars['page_link'] = l('(permalink)', $vars['comment']->page_url);
    }
    
    // Load the signature. 
    if (module_exists('signature_forum')) {
      // If Signature For Forums is installed, use that
      $vars['signature'] = signature_forum_get_signature($vars['comment']);
    }
    elseif (variable_get('user_signatures', 0)) {
      if ($vars['account']->signature) {
        // Otherwise load Drupal's built in one, if enabled.
        $vars['signature'] = check_markup($vars['account']->signature, $vars['comment']->format);
      }
    }
  }
}

function advanced_forum_preprocess_comment_wrapper(&$variables) {
  if (advanced_forum_treat_as_forum_post('comment-wrapper', $variables)) {
    $variables['template_files'][] = 'advf-comment-wrapper';
  
    // Make a variable for the reply link so it can be put on the bottom of the thread
    $reply_link = $variables['node']->links['comment_add'];
  
    if (!empty($reply_link)) {
      $reply_link['title'] = t("Post Reply");
      $variables['reply_link'] = theme('links', array('topic_reply' => $reply_link), array('class' => 'forumlinks'));
    }
  }
}

/**
 * Preprocesses template variables for the user info template.
 */
function template_preprocess_forum_user(&$variables) {
  // The passed in $variables['account'] refers to the user who's info is in the pane.
  $account = $variables['account'];

  // Username
  $variables['name_raw'] =  theme('username', $account);
  $variables['name'] =  '<div class="username">' .$variables['name_raw'] . '</div>';

  // Avatar
  $variables['picture'] = theme('user_picture', $account);

  // Nothing else applies to anon users, so just stop here
  if ($variables['account']->uid == 0) {
    return;
  }

  // Join date / since
  $just_date = str_replace(array('H:i', 'g:ia', ' - '), '', variable_get('date_format_short', 'm/d/Y - H:i'));
  $variables['joined_raw'] = format_date($account->created, 'custom', $just_date);
  $variables['joined'] = '<div class="account-joined"><span class="user-info-label">' . t('Joined:') . ' </span>' . $variables['joined_raw'] . '</div>';

  $variables['joined_ago_raw'] = format_interval(time() - $account->created);
  $variables['joined_ago'] = '<div class="account-member-since"><span class="user-info-label">' . t('Joined:')  . ' </span>' . $variables['member_since_raw'] . 'ago </div>';

  // Online status
  if (round((time()-$account->access)/60) < 15) {
    $variables['online_icon'] = theme('image', advanced_forum_path_to_images() . '/user-online.png', t('User is online'), t('User is online'), NULL, TRUE);
    $variables['online_status'] = '<div class="user-online">' . $variables['online_icon'] . ' ' . t('Online') . '</div>';
  } 
  else {
    $variables['online_icon'] = theme('image', advanced_forum_path_to_images() . '/user-offline.png', t('User is offline'), t('User is offline'), NULL, TRUE);
    $variables['online_status'] = '<div class="user-offline">' . $variables['online_icon'] . ' ' . t('Offline') . '</div>';
  }
}

function advanced_forum_preprocess_forum_post(&$variables) {
  $variables['template_files'][] = 'advf-forum-post';
}

/**
 * Preprocesses template variables for the forum template.
 *
 * This function adds additional functionality to the core forum preprocess.
 */
function advanced_forum_preprocess_forums($variables) {
  $variables['template_files'][] = 'advf-forums';

  if (empty($variables['topics'])) {
    // We don't want the links on the top of the forum overview
    $variables['links_orig'] = $variables['links'];
    $variables['links'] = array();
  } 
  else {
    // Grab the forum description and make it available to the template file
    $forum = taxonomy_get_term($variables['tid']);
    $variables['forum_description'] = $forum->description;
  }

  // Add in the mark as read link if user has access
  if (advanced_forum_markasread_access()) {
    $tid = $variables['tid'];
    if ($tid) {
      $title = t('Mark all topics read');
      $link = "forum/markasread/$tid";
    } 
    else {
      $title = t('Mark all forums read');
      $link = "forum/markasread";
    }
    
    // To avoid translation issues, make the button version optional
    if (variable_get('advanced_forum_button_links', 1)) {
      $title_image = theme('image', advanced_forum_path_to_images() . '/' . 'mark-read.png');
      $variables['links']['markasread'] = array('title' => $title_image, 'href'=>$link, 'html' => TRUE);
      $variables['links_orig']['markasread'] = array('title' => $title_image, 'href'=>$link, 'html' => TRUE);
    }
    else {
      $variables['links']['markasread'] = array('title' => $title, 'href'=>$link);
      $variables['links_orig']['markasread'] = array('title' => $title, 'href'=>$link);
    }
  }
}

/**
 * Preprocesses template variables for the forum list template.
 *
 * This function adds additional functionality to the core forum preprocess.
 */
function advanced_forum_preprocess_forum_list(&$variables) {
  $variables['template_files'][] = 'advf-forum-list';
  
  global $user;
   
  $number_of_forums = count($variables['forums']); 
  $forum_counter = 0;
  foreach ($variables['forums'] as $id => $forum) {
    // Counter to label the rows by position
    $forum_counter++;
    switch ($forum_counter) {
      case "1":
        $row_classes = 'first-row';
        break;
      case $number_of_forums:
        $row_classes = 'last-row';
        break;
      default:
        $row_classes = 'middle-row';
    }
    
    if ($forum->is_container) {
      $row_classes .= ' container';
    }
    
    $variables['forums'][$id]->row_classes = $row_classes;
 
    $variables['forums'][$id]->new_posts = 0;
    $variables['forums'][$id]->new_text_posts = '';
    $variables['forums'][$id]->new_url_posts = '';
    $variables['forums'][$id]->old_posts = $forum->num_posts;
    
    if ($forum->is_container) {
      $current_container = $forum->tid;
      $current_container_depth = $forum->depth;
      $variables['forums'][$id]->container_id = $current_container;
    }
    else {
      if ($forum->depth > $current_container_depth ) {
        $variables['forums'][$id]->container_id = $current_container;
      }     
    }

    if ($user->uid) {
      // Show number of new posts as well as topics
      if (variable_get('advanced_forum_get_new_comments', 0)) {
        // This can cause performance issues, so allow it to be turned off
        $variables['forums'][$id]->new_posts = advanced_forum_unread_comments_in_forum($forum->tid, $user->uid) + $variables['forums'][$id]->new_topics; 
            
        if ($variables['forums'][$id]->new_posts) {
          $variables['forums'][$id]->new_text_posts = format_plural($variables['forums'][$id]->new_posts, '1 new', '@count new');
          $variables['forums'][$id]->new_url_posts = url("forum/$forum->tid", array('fragment' => 'new'));
        }
       
        $variables['forums'][$id]->old_posts = $forum->num_posts - $variables['forums'][$id]->new_posts;
      }    
    }  
      
    // If there are new topics/posts, change the icon
    if ($forum->new_topics || $forum->new_posts) {
       $variables['forums'][$id]->icon = theme('image', advanced_forum_path_to_images() . '/forum-folder-new-posts.png');
    }
    else {
      $variables['forums'][$id]->icon = theme('image', advanced_forum_path_to_images() . '/forum-folder.png');
    }
  }  
}

/**
 * Preprocesses template variables for the submitted by/in template.
 *
 * This function adds additional functionality to the core forum preprocess.
 */
function advanced_forum_preprocess_forum_submitted(&$variables) {
  $variables['template_files'][] = 'advf-forum-submitted';
  
  // Avoid E_ALL warning
  $variables['topic_link'] = '';

  if (isset($variables['topic']->node_title)) {
    $nid = $variables['topic']->nid;
  
    // Make a fake node object to avoid the node load
    $node = new stdClass();
    $node->nid = $nid;
    $node->type = $variables['topic']->type;

    // Find the page of the first unread comment, if any
    $num_comments = db_result(db_query('SELECT COUNT(cid) FROM {comments} WHERE nid = %d', $nid));
    $new_replies = comment_num_new($nid);
    $query = comment_new_page_count($num_comments, $new_replies, $node);

    // Format the node title with a link
    $short_topic_title = truncate_utf8($variables['topic']->node_title, 15, TRUE, TRUE);
    $fragment = ($new_replies) ? 'new' : '';
    $variables['topic_link'] = l($short_topic_title, "node/$nid", array('query' => $query, 'fragment' => $fragment));
  }
  
  // For items posted more than 48 hours ago, offer an actual date.
  $timestamp = $variables['topic']->timestamp;
  if (time() - $timestamp > 172800) {
    $variables['date_posted'] = format_date($timestamp, 'small');
  }
}

/**
 * Preprocesses template variables for the topic list template.
 *
 * This function adds additional functionality to the core forum preprocess.
 */
function advanced_forum_preprocess_forum_topic_list(&$variables) {
  // Take control of the template file.
  $variables['template_files'][] = 'advf-forum-topic-list';

  // Redo the table header so we can add in views. 
  global $forum_topic_list_header;

  $forum_topic_list_header = array();
  $forum_topic_list_header[] = array('data' => '&nbsp;', 'class' => 'topic-icon');
  $forum_topic_list_header[] = array('data' => t('Topic'), 'field' => 'n.title', 'class' => 'topic-topic');
  $forum_topic_list_header[] = array('data' => t('Replies'), 'field' => 'l.comment_count', 'class' => 'topic-replies');
  
  // Topic views require the statistics module so don't show if it's not enabled
  if (module_exists('statistics')) {
    $forum_topic_list_header[] =  array('data' => t('Views'), 'class' => 'topic-views');
  }
  
  // Allow admins to turn off the created column
  if (!variable_get('advanced_forum_hide_created', 0)) {
    $forum_topic_list_header[] =  array('data' => t('Created'), 'field' => 'n.created', 'class' => 'topic-created');
  }
  
  $forum_topic_list_header[] =  array('data' => t('Last reply'), 'field' => 'l.last_comment_timestamp', 'class' => 'topic-lreply');

  // Create the tablesorting header.
  $ts = tablesort_init($forum_topic_list_header);
  $header = '';
  foreach ($forum_topic_list_header as $cell) {
    $cell = tablesort_header($cell, $forum_topic_list_header, $ts);
    $header .= _theme_table_cell($cell, TRUE);
  }
  $variables['header'] = $header;

  // Grab the forum description and make it available to the template file
  $forum = taxonomy_get_term($variables['topic_id']);
  $variables['forum_description'] = $forum->description;

  // Do our own topic processing.
  if (!empty($variables['topics'])) {
    $row = 0;
    $was_sticky = FALSE;
    
    // Find out how many pages to show on the topic pager. We do this outside
    // the loop because it will be the same for all topics.
    $max_pages_to_display = variable_get('advanced_forum_topic_pager_max', 5);

    foreach ($variables['topics'] as $id => $topic) {
      // Get a pager to add to the topic, if there is one
      $variables['topics'][$id]->pager = _advanced_forum_create_topic_pager($max_pages_to_display, $topic);

      // Make shadow copy point to actual thread and tell you new the forum name
      if ($variables['topics'][$id]->moved == TRUE) {
        $term = taxonomy_get_term($topic->tid);
        $variables['topics'][$id]->message = l(t('This topic has been moved to ') . $term->name, "node/$topic->nid");
      }

      // Send the NID into the icon theme code so it can be linked to the topic
      $variables['topics'][$id]->icon = theme('forum_icon', $topic->new, $topic->num_comments, $topic->comment_mode, $topic->sticky, $topic->nid);

      // Add in the number of views
      if (module_exists('statistics')) {
        $variables['topics'][$id]->views =  _advanced_forum_get_topic_views_count($topic->nid);
      }
      
      // Set classes based on stickiness. This allows themers to seperate out
      // all the sticky posts into their own section.
      if ($topic->sticky) {
        $sticky_class = 'sticky-topic';
        $was_sticky = TRUE;
      } 
      elseif ($wassticky) {
        $sticky_class = 'first-not-sticky not-sticky';
        $was_sticky = FALSE;
      } 
      else {
        $sticky_class  = 'not-sticky';
      }
      
      $topic->sticky_class = $sticky_class;      

    }      
  }
}

/**
 * Preprocesses template variables for the forum icon template.
 *
 * This function adds additional functionality to the core forum preprocess.
 */
function advanced_forum_preprocess_forum_icon(&$variables) {
  $variables['template_files'][] = 'advf-forum-icon';

  $variables['iconpath'] = advanced_forum_path_to_images();
}

// CORE FORUM PAGE OVERRIDE **************************************************/

/**
 * Menu callback; prints a forum listing.
 *
 * This is copied from the forum module and adapted.
 */
function advanced_forum_page($tid = 0) {
  $topics = '';
  $forum_per_page = variable_get('forum_per_page', 25);
  $sortby = variable_get('forum_order', 1);

  $forums = advanced_forum_get_forums($tid);
  $parents = taxonomy_get_parents_all($tid);
  if ($tid && !in_array($tid, variable_get('forum_containers', array()))) {
    $topics = forum_get_topics($tid, $sortby, $forum_per_page);
  }

  return theme('forums', $forums, $topics, $parents, $tid, $sortby, $forum_per_page);
}

/**
 * Returns a list of all forums for a given taxonomy id
 *
 * This is copied from the forum module and adapted.
 *
 * Forum objects contain the following fields
 * -num_topics Number of topics in the forum
 * -num_posts Total number of posts in all topics
 * -last_post Most recent post for the forum
 *
 * @param $tid
 *   Taxonomy ID of the vocabulary that holds the forum list.
 * @return
 *   Array of object containing the forum information.
 */
function advanced_forum_get_forums($tid = 0) {

  $forums = array();
  $vid = variable_get('forum_nav_vocabulary', '');
  $_forums = taxonomy_get_tree($vid, $tid);

  if (count($_forums)) {

    $counts = array();

    $sql = "SELECT r.tid, COUNT(n.nid) AS topic_count, SUM(l.comment_count) AS comment_count 
            FROM {node} n 
            INNER JOIN {node_comment_statistics} l ON n.nid = l.nid 
            INNER JOIN {term_node} r ON n.vid = r.vid 
            WHERE n.status = 1 
            GROUP BY r.tid";
    $sql = db_rewrite_sql($sql);
    $_counts = db_query($sql);
    while ($count = db_fetch_object($_counts)) {
      $counts[$count->tid] = $count;
    }
  }

  foreach ($_forums as $forum) {
    // Check if this term is a container
    if (in_array($forum->tid, variable_get('forum_containers', array()))) {
      $forum->container = 1;
    }

    if (!empty($counts[$forum->tid])) {
      $forum->num_topics = $counts[$forum->tid]->topic_count;
      $forum->num_posts = $counts[$forum->tid]->topic_count + $counts[$forum->tid]->comment_count;
    }
    else {
      $forum->num_topics = 0;
      $forum->num_posts = 0;
    }

    // This query does not use full ANSI syntax since MySQL 3.x does not support
    // table1 INNER JOIN table2 INNER JOIN table3 ON table2_criteria ON table3_criteria
    // used to join node_comment_statistics to users.
    $sql = "SELECT n.nid, n.title, n.type,
                   ncs.last_comment_timestamp, 
                   IF (ncs.last_comment_uid != 0, u2.name, ncs.last_comment_name) AS last_comment_name, 
                   ncs.last_comment_uid 
            FROM {node} n 
            INNER JOIN {users} u1 ON n.uid = u1.uid 
            INNER JOIN {term_node} tn ON n.vid = tn.vid 
            INNER JOIN {node_comment_statistics} ncs ON n.nid = ncs.nid 
            INNER JOIN {users} u2 ON ncs.last_comment_uid=u2.uid 
            WHERE n.status = 1 AND tn.tid = %d 
            ORDER BY ncs.last_comment_timestamp DESC";
    $sql = db_rewrite_sql($sql);
    $topic = db_fetch_object(db_query_range($sql, $forum->tid, 0, 1));

    $last_post = new stdClass();
    if (!empty($topic->last_comment_timestamp)) {
      $last_post->timestamp = $topic->last_comment_timestamp;
      $last_post->name = $topic->last_comment_name;
      $last_post->uid = $topic->last_comment_uid;
      $last_post->nid = $topic->nid;
      // Note, we call it "node_title" otherwise it gets picked up on the  
      // topic list as well.
      $last_post->node_title = $topic->title;
      $last_post->type = $topic->type;
    }
    $forum->last_post = $last_post;

    $forums[$forum->tid] = $forum;
  }

  return $forums;
}

// MARK AS READ **************************************************************/

/**
 * Marks all posts in forums or in a given forum as read by the current user.
 */
function advanced_forum_markasread() {
  global $user;

  // See if we're on a forum or on the forum overview
  // Path will be /forum/markasread or /forum/markasread/tid
  $current_forum_id = arg(2);

  if ($current_forum_id) {
    // Combine INSERT with SELECT+SUBSELECT that will return rows that are not
    // present in the history table, marking all unread nodes as read
    $sql = 'INSERT INTO {history} (uid,nid,timestamp)'
           .' SELECT %d, n.nid, %d FROM {node} AS n'
           .' INNER JOIN {term_node} AS tn ON n.nid=tn.nid'
           .' INNER JOIN {node_comment_statistics} AS ncs ON ncs.nid=n.nid'
           .' WHERE (n.created > %d OR ncs.last_comment_timestamp > %d)'
           .' AND tn.tid = %d'
           .' and n.nid not in ( SELECT nid FROM {history} AS h WHERE h.nid = n.nid AND h.uid = %d)';

    $args = array($user->uid, time(), NODE_NEW_LIMIT, NODE_NEW_LIMIT, $current_forum_id, $user->uid);

    db_query($sql, $args);

    drupal_set_message(t('All content in this forum has been marked as read'));
    drupal_goto('forum/'. $current_forum_id);
  } 
  else {
    // We are on the forum overview, requesting all forums be marked read
    $forum_vocabulary_id = variable_get('forum_nav_vocabulary', '');
 
    // Combine INSERT with SELECT+SUBSELECT that will return rows that are not
    // present in the history table, marking all unread nodes as read.
    // This version adds another subselect to get all forums
    $sql = 'INSERT INTO {history} (uid,nid,timestamp)'
           .' SELECT %d, n.nid, %d FROM {node} AS n'
           .' INNER JOIN {term_node} AS tn ON n.nid=tn.nid' 
           .' INNER JOIN {node_comment_statistics} AS ncs ON ncs.nid=n.nid'
           .' WHERE (n.created > %d OR ncs.last_comment_timestamp > %d)'
           .' and n.nid not in ( SELECT nid FROM {history} AS h WHERE h.nid = n.nid AND h.uid = %d)'
           .' AND tn.tid in (SELECT tid FROM {term_data} WHERE vid = %d)';

    $args = array($user->uid, time(), NODE_NEW_LIMIT, NODE_NEW_LIMIT, $user->uid, $forum_vocabulary_id);

    db_query($sql, $args);

    drupal_set_message(t('All forum content been marked as read'));
    drupal_goto('forum');
  }
}

/**
 * Access callback for menus and link display.
 *
 * This separate function is needed because the Drupal 6 menu system doesn't
 * run hook_menu() every time and the logged-in status of the user can get
 * cached and re-used for other users.
 */
function advanced_forum_markasread_access() {
  global $user;
  return user_access('access content') && $user->uid;
}


// STYLE UTILITY FUNCTIONS ***************************************************/

// Include the file that handles the plugin system adapted from panels.
include_once drupal_get_path('module', 'advanced_forum') . '/advf-plugins.inc';

function advanced_forum_advforum_styles() {
  $items = array();
  $items['naked'] = array(
    'directory' => 'styles/naked',
  );

  $items['flatgrey'] = array(
    'directory' => 'styles/flatgrey',
  );
  
  $items['blue_lagoon'] = array(
    'directory' => 'styles/blue_lagoon',
  );
  
  return $items;
}

/**
 * Returns the name of the forum style to use.
 */
function advanced_forum_get_current_style() {
  return variable_get('advanced_forum_style', 'naked');
}

/**
 * Returns the path to the advanced forum style, including the style name
 */
function advanced_forum_path_to_style() {
  static $style_path;
  
  if (!$style_path) {
    // Retrieve the style name 
    $style = advanced_forum_get_current_style();
    
    // Get the path information
    $style_info = advanced_forum_get_style($style);
    $style_path = $style_info['path'];    
  }

  return $style_path;
}

/**
 * Returns the path to the advanced forum image directory
 */
function advanced_forum_path_to_images() {
  static $image_path;
  
  if (!$image_path) {
    $image_path = variable_get('advanced_forum_image_directory', '');
    
    if (empty($image_path)) {
      $image_path = advanced_forum_path_to_style() . '/images';
    }
  }
  
  return $image_path;
}

// COLLAPSABLE CONTAINERS ****************************************************/

/**
 * Allows users with javascript enabled to collapse / expand containers.
 */
function advanced_form_ajax($op, $container_id = NULL) {
  global $base_url;
  $base_url = str_replace('.', '_', $base_url);
  switch($op) {
    case 'load':
      if(!isset($_COOKIE[$base_url.'_advanced_forum'])) {
        //Set defaults in the cookie.
        $defaults = variable_get('advanced_forum_collapse_defaults', array());
        setcookie($base_url.'_advanced_forum[tids]', serialize($initial_state), time()+60*60*24*30, '/');
      }
      else {
        $initial_state = unserialize($_COOKIE[$base_url.'_advanced_forum']['tids']);
      }
      print drupal_json(array('tids' => $initial_state));
      break;
    case 'toggle':
      if(!$container_id)
        exit;
      if(!isset($_COOKIE[$base_url.'_advanced_forum'])) {
        $defaults = variable_get('advanced_forum_collapse_defaults', array());
      }
      else {
        $initial_state = unserialize($_COOKIE[$base_url.'_advanced_forum']['tids']);
      }
      $initial_state[$container_id] = 1 - $initial_state[$container_id];
      setcookie($base_url.'_advanced_forum[tids]', serialize($initial_state), time()+60*60*24*30, '/');
      break;
  }
}

/**
 * This function returns true if the node/comment should be themed and 
 * otherwise treated as a forum post.
 */
function advanced_forum_treat_as_forum_post($hook, $vars) {
  // Setting this static means the check only needs to be done once per thread
  static $forum_node_id;

  switch ($hook) {
    case 'node':
      $vid = variable_get('forum_nav_vocabulary', '');
      $vocabulary = taxonomy_vocabulary_load($vid);
      if (empty($vocabulary) || !in_array($vars['node']->type, $vocabulary->nodes)) {
        // No forum vocabulary or the node type cannot be used in the forums
        unset($forum_node_id);
        return false;
      }

      // Get a list of the terms attached to this node
      $terms = taxonomy_node_get_terms_by_vocabulary($vars['node'], $vid);
      if (count($terms) > 0 && (arg(0) == 'node' && is_numeric(arg(1)) && arg(1) == $vars['node']->nid || arg(0) == 'comment')) {
        // The node has at least one forum term attached to it and is not being
        // shown on some other page (like a view or promoted to front page)
        $forum_node_id = $vars['node']->nid;
        return true;
      }
      else {
        // We've hit a non forum node
        unset($forum_node_id);
        return false;
      }

    case 'comment-wrapper':
      if (isset($forum_node_id) && ($vars['node']->nid == $forum_node_id)) {
        // We already know this comment wrapper is either part of a forum thread
        // or that comments on this thread are known exceptions.
        return true;
      } 
      else {
        // Not part of a forum thread. Check for exceptions.
        if (variable_get("advanced_forum_theme_all_comments", 0) == 1) {
          // This site wants all comments to use the forum comment template
          $forum_node_id = $vars['node']->nid;
          return true;
        }
      }
      
      // Comment wrapper is not part of a forum thread and there are no exceptions.
      return false;

    case 'comment':
      if (isset($forum_node_id) && ($vars['comment']->nid == $forum_node_id)) {
        // We already know this comment is either part of a forum thread
        // or that comments on this thread are known exceptions.
        return true;
      } 
      else {
        // Not part of a forum thread. Check for exceptions.
        if (variable_get("advanced_forum_theme_all_comments", 0) == 1) {
          // This site wants all comments to use the forum comment template
          $forum_node_id = $vars['comment']->nid;
          return true;
        }

        if (arg(0) == 'comment' && is_numeric(arg(1))) {
          // Comment is being shown alone via the comment_page module
          // For now, assume those should be themed like the forums.
          // TODO: Possibly add a setting for this?
          $forum_node_id = $vars['comment']->nid;
          return true;
        }

        // Comment is not part of a forum thread and there are no exceptions.
        return false;
      }

    default:
      // We only deal with nodes and comments
      return false;
  }
}


// GENERAL UTILITY FUNCTIONS *************************************************/

/**
 * Holds the node ID of the thread we are on.
 *
 * Used for linking the comment numbers.
 *
 * @param $nid
 *   Node ID
 */
function _advanced_forum_topic_nid($nodeid = 0) {
  static $nid;

  if (!empty($nodeid)) {
    $nid = $nodeid;
  }

  return $nid;
}

/**
 * Returns the ID of the first unread comment.
 *
 * @param $nid
 *   Node ID
 * @param $timestamp
 *   Date/time used to override when the user last viewed the node.
 * @return
 *   Comment ID
 */
function advanced_forum_first_new_comment($nid, $timestamp = 0) {
  global $user;

  if ($user->uid) {
    // Retrieve the timestamp at which the current user last viewed the
    // specified node.
    if (!$timestamp) {
      $timestamp = node_last_viewed($nid);
    }
    $timestamp = ($timestamp > NODE_NEW_LIMIT ? $timestamp : NODE_NEW_LIMIT);

    // Use the timestamp to retrieve the oldest new comment.
    $result = db_result(db_query('SELECT c.cid FROM {node} n INNER JOIN {comments} c ON n.nid = c.nid WHERE n.nid = %d AND timestamp > %d AND c.status = %d ORDER BY c.cid LIMIT 1', $nid, $timestamp, COMMENT_PUBLISHED));

    return $result;
  }
  else {
    return 0;
  }
}

/**
 * Creates a pager to place on each multi-page topic of the topic listing page.
 *
 * @param $max_pages_to_display
 *   Number of pages to include on the pager.
 * @param $topic
 *   Topic object to create a pager for.
 * @return
 *   Asembled pager.
 */
function _advanced_forum_create_topic_pager($max_pages_to_display, $topic) {
  // Find the number of comments per page for the node type of the topic.
  // It's the same for all types in D5, but varies in D6.
  $comments_per_page = _comment_get_display_setting('comments_per_page', $topic);

  if ($max_pages_to_display > 0 && $topic->num_comments > $comments_per_page) {
    // Topic has more than one page and a pager is wanted. Start off the
    // first page because that doesn't have a query.
    $pager_array = array();
    $current_display_page = 1;
    $pager_array[] = l('1', "node/$topic->nid");

    // Find the ending point. The pager URL is always 1 less than
    // the number being displayed because the first page is 0.
    $last_display_page = ceil($topic->num_comments / $comments_per_page);
    $last_pager_page = $last_display_page - 1;

    // Add pages until we run out or until we hit the max to show.
    while (($current_display_page < $last_display_page) && ($current_display_page < $max_pages_to_display)) {
      // Move to the next page
      $current_display_page++;

      // The page number we link to is 1 less than what's displayed
      $link_to_page = $current_display_page - 1;

      // Add the link to the array
      $pager_array[] =  l($current_display_page, "node/$topic->nid", array('query' => 'page=' . $link_to_page));
    }

    // Move to the next page
    $current_display_page++;

    if ($current_display_page == $last_display_page) {
      // We are one past the max to display, but it's the last page,
      // so putting the ...last is silly. Just display it normally.
      $link_to_page = $current_display_page - 1;
      $pager_array[] =  l($current_display_page, "node/$topic->nid", array('query' => 'page=' . $link_to_page));
    }

    $pager_last = '';
    if ($current_display_page < $last_display_page) {
      // We are one past the max to display and still aren't
      // on the last page, so put in ... Last Page(N)
      $text = t('Last Page') . '(' . $last_display_page . ')';
      $pager_last = ' &hellip; ' . l($text, "node/$topic->nid", array('query' => 'page=' . $last_pager_page));
    }

    // Put it all together
    return '[' . t('Page') . ' '. implode(", ", $pager_array) . $pager_last . ']';
  }
}

/**
 * Retrieves a forum topic's "views count".
 *
 * @param $nid
 *   Node ID
 * @return
 *   Total number of times that node has been viewed.
 */
function _advanced_forum_get_topic_views_count($nid) {
  if ($nid > 0) {
    $views_count = db_result(db_query('SELECT totalcount FROM {node_counter} WHERE nid = %d', $nid));
  }

  // Make sure it's 0, not blank, for better display.
  if (empty($views_count)) {
    $views_count = 0;
  }
  return $views_count;
}

/**
 * Returns the number of unread posts in a given forum for a given user
 */
function advanced_forum_unread_comments_in_forum($tid, $uid) {
  $sql = "SELECT COUNT(c.cid) 
          FROM {comments} c 
            INNER JOIN {term_node} tn ON c.nid = tn.nid AND tn.tid = %d 
            LEFT JOIN {history} h ON c.nid = h.nid AND h.uid = %d 
          WHERE c.status = 0 AND ((c.timestamp > h.timestamp AND c.timestamp > %d) OR h.timestamp IS NULL)";
  $sql = db_rewrite_sql($sql, 'c', 'cid');
  return db_result(db_query($sql, $tid, $uid, NODE_NEW_LIMIT));
}


function advanced_forum_get_forum_list($tid = 0) {
  $forums = array();
  $vid = variable_get('forum_nav_vocabulary', '');
  $forums = taxonomy_get_tree($vid, $tid);
  
  return $forums;
}
